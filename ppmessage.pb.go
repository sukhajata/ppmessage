// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.0
// source: ppmessage.proto

package ppmessage

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type InstMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deviceeui     string  `protobuf:"bytes,1,opt,name=deviceeui,proto3" json:"deviceeui,omitempty"`
	Timestamp     uint64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Phaseid       uint32  `protobuf:"varint,3,opt,name=phaseid,proto3" json:"phaseid,omitempty"`
	Activepower   float64 `protobuf:"fixed64,4,opt,name=activepower,proto3" json:"activepower,omitempty"`
	Reactivepower float64 `protobuf:"fixed64,5,opt,name=reactivepower,proto3" json:"reactivepower,omitempty"`
	Current       float64 `protobuf:"fixed64,6,opt,name=current,proto3" json:"current,omitempty"`
	Voltage       float64 `protobuf:"fixed64,7,opt,name=voltage,proto3" json:"voltage,omitempty"`
}

func (x *InstMessage) Reset() {
	*x = InstMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ppmessage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstMessage) ProtoMessage() {}

func (x *InstMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ppmessage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstMessage.ProtoReflect.Descriptor instead.
func (*InstMessage) Descriptor() ([]byte, []int) {
	return file_ppmessage_proto_rawDescGZIP(), []int{0}
}

func (x *InstMessage) GetDeviceeui() string {
	if x != nil {
		return x.Deviceeui
	}
	return ""
}

func (x *InstMessage) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *InstMessage) GetPhaseid() uint32 {
	if x != nil {
		return x.Phaseid
	}
	return 0
}

func (x *InstMessage) GetActivepower() float64 {
	if x != nil {
		return x.Activepower
	}
	return 0
}

func (x *InstMessage) GetReactivepower() float64 {
	if x != nil {
		return x.Reactivepower
	}
	return 0
}

func (x *InstMessage) GetCurrent() float64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *InstMessage) GetVoltage() float64 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

type PQMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deviceeui             string  `protobuf:"bytes,1,opt,name=deviceeui,proto3" json:"deviceeui,omitempty"`
	Timestamp             uint64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Phaseid               uint32  `protobuf:"varint,3,opt,name=phaseid,proto3" json:"phaseid,omitempty"`
	Voltagemax            float64 `protobuf:"fixed64,4,opt,name=voltagemax,proto3" json:"voltagemax,omitempty"`
	Currentmax            float64 `protobuf:"fixed64,5,opt,name=currentmax,proto3" json:"currentmax,omitempty"`
	Poweractivemax        float64 `protobuf:"fixed64,6,opt,name=poweractivemax,proto3" json:"poweractivemax,omitempty"`
	Powerreactivemax      float64 `protobuf:"fixed64,7,opt,name=powerreactivemax,proto3" json:"powerreactivemax,omitempty"`
	Thdvmax               float64 `protobuf:"fixed64,8,opt,name=thdvmax,proto3" json:"thdvmax,omitempty"`
	Voltagesma            float64 `protobuf:"fixed64,9,opt,name=voltagesma,proto3" json:"voltagesma,omitempty"`
	Currentsma            float64 `protobuf:"fixed64,10,opt,name=currentsma,proto3" json:"currentsma,omitempty"`
	Poweractivesma        float64 `protobuf:"fixed64,11,opt,name=poweractivesma,proto3" json:"poweractivesma,omitempty"`
	Powerreactivesma      float64 `protobuf:"fixed64,12,opt,name=powerreactivesma,proto3" json:"powerreactivesma,omitempty"`
	Thdvsma               float64 `protobuf:"fixed64,13,opt,name=thdvsma,proto3" json:"thdvsma,omitempty"`
	Voltagemin            float64 `protobuf:"fixed64,14,opt,name=voltagemin,proto3" json:"voltagemin,omitempty"`
	Currentmin            float64 `protobuf:"fixed64,15,opt,name=currentmin,proto3" json:"currentmin,omitempty"`
	Poweractivemin        float64 `protobuf:"fixed64,16,opt,name=poweractivemin,proto3" json:"poweractivemin,omitempty"`
	Powerreactivemin      float64 `protobuf:"fixed64,17,opt,name=powerreactivemin,proto3" json:"powerreactivemin,omitempty"`
	Thdvmin               float64 `protobuf:"fixed64,18,opt,name=thdvmin,proto3" json:"thdvmin,omitempty"`
	Momentarysag          int32   `protobuf:"varint,19,opt,name=momentarysag,proto3" json:"momentarysag,omitempty"`
	Momentaryswell        int32   `protobuf:"varint,20,opt,name=momentaryswell,proto3" json:"momentaryswell,omitempty"`
	Temporarysag          int32   `protobuf:"varint,21,opt,name=temporarysag,proto3" json:"temporarysag,omitempty"`
	Temporaryswell        int32   `protobuf:"varint,22,opt,name=temporaryswell,proto3" json:"temporaryswell,omitempty"`
	Sustainedundervoltage int32   `protobuf:"varint,23,opt,name=sustainedundervoltage,proto3" json:"sustainedundervoltage,omitempty"`
	Sustainedovervoltage  int32   `protobuf:"varint,24,opt,name=sustainedovervoltage,proto3" json:"sustainedovervoltage,omitempty"`
	Prolongedundervoltage int32   `protobuf:"varint,25,opt,name=prolongedundervoltage,proto3" json:"prolongedundervoltage,omitempty"`
	Prolongedovervoltage  int32   `protobuf:"varint,26,opt,name=prolongedovervoltage,proto3" json:"prolongedovervoltage,omitempty"`
	Thdisma               float64 `protobuf:"fixed64,27,opt,name=thdisma,proto3" json:"thdisma,omitempty"`
	Neutralcurrentsma     float64 `protobuf:"fixed64,28,opt,name=neutralcurrentsma,proto3" json:"neutralcurrentsma,omitempty"`
	Neutralcurrentmax     float64 `protobuf:"fixed64,29,opt,name=neutralcurrentmax,proto3" json:"neutralcurrentmax,omitempty"`
	Powerapparentsma      float64 `protobuf:"fixed64,30,opt,name=powerapparentsma,proto3" json:"powerapparentsma,omitempty"`
	Powerapparentmax      float64 `protobuf:"fixed64,31,opt,name=powerapparentmax,proto3" json:"powerapparentmax,omitempty"`
	Powerapparentmin      float64 `protobuf:"fixed64,32,opt,name=powerapparentmin,proto3" json:"powerapparentmin,omitempty"`
}

func (x *PQMessage) Reset() {
	*x = PQMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ppmessage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PQMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PQMessage) ProtoMessage() {}

func (x *PQMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ppmessage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PQMessage.ProtoReflect.Descriptor instead.
func (*PQMessage) Descriptor() ([]byte, []int) {
	return file_ppmessage_proto_rawDescGZIP(), []int{1}
}

func (x *PQMessage) GetDeviceeui() string {
	if x != nil {
		return x.Deviceeui
	}
	return ""
}

func (x *PQMessage) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PQMessage) GetPhaseid() uint32 {
	if x != nil {
		return x.Phaseid
	}
	return 0
}

func (x *PQMessage) GetVoltagemax() float64 {
	if x != nil {
		return x.Voltagemax
	}
	return 0
}

func (x *PQMessage) GetCurrentmax() float64 {
	if x != nil {
		return x.Currentmax
	}
	return 0
}

func (x *PQMessage) GetPoweractivemax() float64 {
	if x != nil {
		return x.Poweractivemax
	}
	return 0
}

func (x *PQMessage) GetPowerreactivemax() float64 {
	if x != nil {
		return x.Powerreactivemax
	}
	return 0
}

func (x *PQMessage) GetThdvmax() float64 {
	if x != nil {
		return x.Thdvmax
	}
	return 0
}

func (x *PQMessage) GetVoltagesma() float64 {
	if x != nil {
		return x.Voltagesma
	}
	return 0
}

func (x *PQMessage) GetCurrentsma() float64 {
	if x != nil {
		return x.Currentsma
	}
	return 0
}

func (x *PQMessage) GetPoweractivesma() float64 {
	if x != nil {
		return x.Poweractivesma
	}
	return 0
}

func (x *PQMessage) GetPowerreactivesma() float64 {
	if x != nil {
		return x.Powerreactivesma
	}
	return 0
}

func (x *PQMessage) GetThdvsma() float64 {
	if x != nil {
		return x.Thdvsma
	}
	return 0
}

func (x *PQMessage) GetVoltagemin() float64 {
	if x != nil {
		return x.Voltagemin
	}
	return 0
}

func (x *PQMessage) GetCurrentmin() float64 {
	if x != nil {
		return x.Currentmin
	}
	return 0
}

func (x *PQMessage) GetPoweractivemin() float64 {
	if x != nil {
		return x.Poweractivemin
	}
	return 0
}

func (x *PQMessage) GetPowerreactivemin() float64 {
	if x != nil {
		return x.Powerreactivemin
	}
	return 0
}

func (x *PQMessage) GetThdvmin() float64 {
	if x != nil {
		return x.Thdvmin
	}
	return 0
}

func (x *PQMessage) GetMomentarysag() int32 {
	if x != nil {
		return x.Momentarysag
	}
	return 0
}

func (x *PQMessage) GetMomentaryswell() int32 {
	if x != nil {
		return x.Momentaryswell
	}
	return 0
}

func (x *PQMessage) GetTemporarysag() int32 {
	if x != nil {
		return x.Temporarysag
	}
	return 0
}

func (x *PQMessage) GetTemporaryswell() int32 {
	if x != nil {
		return x.Temporaryswell
	}
	return 0
}

func (x *PQMessage) GetSustainedundervoltage() int32 {
	if x != nil {
		return x.Sustainedundervoltage
	}
	return 0
}

func (x *PQMessage) GetSustainedovervoltage() int32 {
	if x != nil {
		return x.Sustainedovervoltage
	}
	return 0
}

func (x *PQMessage) GetProlongedundervoltage() int32 {
	if x != nil {
		return x.Prolongedundervoltage
	}
	return 0
}

func (x *PQMessage) GetProlongedovervoltage() int32 {
	if x != nil {
		return x.Prolongedovervoltage
	}
	return 0
}

func (x *PQMessage) GetThdisma() float64 {
	if x != nil {
		return x.Thdisma
	}
	return 0
}

func (x *PQMessage) GetNeutralcurrentsma() float64 {
	if x != nil {
		return x.Neutralcurrentsma
	}
	return 0
}

func (x *PQMessage) GetNeutralcurrentmax() float64 {
	if x != nil {
		return x.Neutralcurrentmax
	}
	return 0
}

func (x *PQMessage) GetPowerapparentsma() float64 {
	if x != nil {
		return x.Powerapparentsma
	}
	return 0
}

func (x *PQMessage) GetPowerapparentmax() float64 {
	if x != nil {
		return x.Powerapparentmax
	}
	return 0
}

func (x *PQMessage) GetPowerapparentmin() float64 {
	if x != nil {
		return x.Powerapparentmin
	}
	return 0
}

var File_ppmessage_proto protoreflect.FileDescriptor

var file_ppmessage_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x70, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x70, 0x70, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xdf, 0x01, 0x0a,
	0x0b, 0x49, 0x6e, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x22, 0xd1,
	0x09, 0x0a, 0x09, 0x50, 0x51, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x6d, 0x61, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x6d,
	0x61, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x78,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6d,
	0x61, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x78, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x6d, 0x61, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x68, 0x64, 0x76, 0x6d, 0x61,
	0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x74, 0x68, 0x64, 0x76, 0x6d, 0x61, 0x78,
	0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x73, 0x6d, 0x61, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x73, 0x6d, 0x61,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x6d, 0x61, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x6d, 0x61,
	0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73,
	0x6d, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x6d, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x6d, 0x61, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x73, 0x6d, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x68, 0x64, 0x76, 0x73, 0x6d, 0x61, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x74, 0x68, 0x64, 0x76, 0x73, 0x6d, 0x61, 0x12, 0x1e,
	0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6d, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6d, 0x69, 0x6e, 0x12, 0x26,
	0x0a, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x69, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x6d, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x69, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d,
	0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x68, 0x64, 0x76, 0x6d, 0x69, 0x6e, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x74, 0x68, 0x64, 0x76, 0x6d, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x73, 0x61, 0x67, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x73, 0x61, 0x67,
	0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x73, 0x77, 0x65,
	0x6c, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x72, 0x79, 0x73, 0x77, 0x65, 0x6c, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x72, 0x79, 0x73, 0x61, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x73, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0e,
	0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x73, 0x77, 0x65, 0x6c, 0x6c, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x73,
	0x77, 0x65, 0x6c, 0x6c, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x15, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x75,
	0x73, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x34,
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x70,
	0x72, 0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x76, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x65,
	0x64, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x64, 0x6f, 0x76, 0x65,
	0x72, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x68, 0x64, 0x69,
	0x73, 0x6d, 0x61, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x74, 0x68, 0x64, 0x69, 0x73,
	0x6d, 0x61, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x73, 0x6d, 0x61, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6e,
	0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x6d, 0x61,
	0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x6d, 0x61, 0x78, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6e, 0x65, 0x75,
	0x74, 0x72, 0x61, 0x6c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x78, 0x12, 0x2a,
	0x0a, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73,
	0x6d, 0x61, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61,
	0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x6d, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x78, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x70, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x6d, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61,
	0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x6d, 0x69, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x6d,
	0x69, 0x6e, 0x42, 0x20, 0x5a, 0x1e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x75, 0x6b, 0x68, 0x61, 0x6a, 0x61, 0x74, 0x61, 0x2f, 0x70, 0x70, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ppmessage_proto_rawDescOnce sync.Once
	file_ppmessage_proto_rawDescData = file_ppmessage_proto_rawDesc
)

func file_ppmessage_proto_rawDescGZIP() []byte {
	file_ppmessage_proto_rawDescOnce.Do(func() {
		file_ppmessage_proto_rawDescData = protoimpl.X.CompressGZIP(file_ppmessage_proto_rawDescData)
	})
	return file_ppmessage_proto_rawDescData
}

var file_ppmessage_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_ppmessage_proto_goTypes = []interface{}{
	(*InstMessage)(nil), // 0: ppmessage.InstMessage
	(*PQMessage)(nil),   // 1: ppmessage.PQMessage
}
var file_ppmessage_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ppmessage_proto_init() }
func file_ppmessage_proto_init() {
	if File_ppmessage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ppmessage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ppmessage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PQMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ppmessage_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ppmessage_proto_goTypes,
		DependencyIndexes: file_ppmessage_proto_depIdxs,
		MessageInfos:      file_ppmessage_proto_msgTypes,
	}.Build()
	File_ppmessage_proto = out.File
	file_ppmessage_proto_rawDesc = nil
	file_ppmessage_proto_goTypes = nil
	file_ppmessage_proto_depIdxs = nil
}
