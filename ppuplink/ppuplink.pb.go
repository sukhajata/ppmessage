// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.0
// source: ppuplink.proto

package ppuplink

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AlarmMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deviceeui string  `protobuf:"bytes,1,opt,name=deviceeui,proto3" json:"deviceeui,omitempty"`
	Timesent  uint64  `protobuf:"varint,2,opt,name=timesent,proto3" json:"timesent,omitempty"`
	Phaseid   uint32  `protobuf:"varint,3,opt,name=phaseid,proto3" json:"phaseid,omitempty"`
	Alarmtype string  `protobuf:"bytes,4,opt,name=alarmtype,proto3" json:"alarmtype,omitempty"`
	Value     float64 `protobuf:"fixed64,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AlarmMessage) Reset() {
	*x = AlarmMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ppuplink_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlarmMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlarmMessage) ProtoMessage() {}

func (x *AlarmMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ppuplink_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlarmMessage.ProtoReflect.Descriptor instead.
func (*AlarmMessage) Descriptor() ([]byte, []int) {
	return file_ppuplink_proto_rawDescGZIP(), []int{0}
}

func (x *AlarmMessage) GetDeviceeui() string {
	if x != nil {
		return x.Deviceeui
	}
	return ""
}

func (x *AlarmMessage) GetTimesent() uint64 {
	if x != nil {
		return x.Timesent
	}
	return 0
}

func (x *AlarmMessage) GetPhaseid() uint32 {
	if x != nil {
		return x.Phaseid
	}
	return 0
}

func (x *AlarmMessage) GetAlarmtype() string {
	if x != nil {
		return x.Alarmtype
	}
	return ""
}

func (x *AlarmMessage) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type CircuitEnergyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deviceeui                string  `protobuf:"bytes,1,opt,name=deviceeui,proto3" json:"deviceeui,omitempty"`
	Timesent                 uint64  `protobuf:"varint,2,opt,name=timesent,proto3" json:"timesent,omitempty"`
	Circuitnumber            uint32  `protobuf:"varint,3,opt,name=circuitnumber,proto3" json:"circuitnumber,omitempty"`
	RealnetenergyPhase_0     float64 `protobuf:"fixed64,4,opt,name=realnetenergy_phase_0,json=realnetenergyPhase0,proto3" json:"realnetenergy_phase_0,omitempty"`
	ReactivenetenergyPhase_0 float64 `protobuf:"fixed64,5,opt,name=reactivenetenergy_phase_0,json=reactivenetenergyPhase0,proto3" json:"reactivenetenergy_phase_0,omitempty"`
	RealnetenergyPhase_1     float64 `protobuf:"fixed64,6,opt,name=realnetenergy_phase_1,json=realnetenergyPhase1,proto3" json:"realnetenergy_phase_1,omitempty"`
	ReactivenetenergyPhase_1 float64 `protobuf:"fixed64,7,opt,name=reactivenetenergy_phase_1,json=reactivenetenergyPhase1,proto3" json:"reactivenetenergy_phase_1,omitempty"`
	RealnetenergyPhase_2     float64 `protobuf:"fixed64,8,opt,name=realnetenergy_phase_2,json=realnetenergyPhase2,proto3" json:"realnetenergy_phase_2,omitempty"`
	ReactivenetenergyPhase_2 float64 `protobuf:"fixed64,9,opt,name=reactivenetenergy_phase_2,json=reactivenetenergyPhase2,proto3" json:"reactivenetenergy_phase_2,omitempty"`
}

func (x *CircuitEnergyMessage) Reset() {
	*x = CircuitEnergyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ppuplink_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitEnergyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitEnergyMessage) ProtoMessage() {}

func (x *CircuitEnergyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ppuplink_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitEnergyMessage.ProtoReflect.Descriptor instead.
func (*CircuitEnergyMessage) Descriptor() ([]byte, []int) {
	return file_ppuplink_proto_rawDescGZIP(), []int{1}
}

func (x *CircuitEnergyMessage) GetDeviceeui() string {
	if x != nil {
		return x.Deviceeui
	}
	return ""
}

func (x *CircuitEnergyMessage) GetTimesent() uint64 {
	if x != nil {
		return x.Timesent
	}
	return 0
}

func (x *CircuitEnergyMessage) GetCircuitnumber() uint32 {
	if x != nil {
		return x.Circuitnumber
	}
	return 0
}

func (x *CircuitEnergyMessage) GetRealnetenergyPhase_0() float64 {
	if x != nil {
		return x.RealnetenergyPhase_0
	}
	return 0
}

func (x *CircuitEnergyMessage) GetReactivenetenergyPhase_0() float64 {
	if x != nil {
		return x.ReactivenetenergyPhase_0
	}
	return 0
}

func (x *CircuitEnergyMessage) GetRealnetenergyPhase_1() float64 {
	if x != nil {
		return x.RealnetenergyPhase_1
	}
	return 0
}

func (x *CircuitEnergyMessage) GetReactivenetenergyPhase_1() float64 {
	if x != nil {
		return x.ReactivenetenergyPhase_1
	}
	return 0
}

func (x *CircuitEnergyMessage) GetRealnetenergyPhase_2() float64 {
	if x != nil {
		return x.RealnetenergyPhase_2
	}
	return 0
}

func (x *CircuitEnergyMessage) GetReactivenetenergyPhase_2() float64 {
	if x != nil {
		return x.ReactivenetenergyPhase_2
	}
	return 0
}

type CircuitLoadMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deviceeui               string  `protobuf:"bytes,1,opt,name=deviceeui,proto3" json:"deviceeui,omitempty"`
	Timesent                uint64  `protobuf:"varint,2,opt,name=timesent,proto3" json:"timesent,omitempty"`
	Circuitnumber           uint32  `protobuf:"varint,3,opt,name=circuitnumber,proto3" json:"circuitnumber,omitempty"`
	CurrentsmaPhase_0       float64 `protobuf:"fixed64,4,opt,name=currentsma_phase_0,json=currentsmaPhase0,proto3" json:"currentsma_phase_0,omitempty"`
	CurrentsmaPhase_1       float64 `protobuf:"fixed64,5,opt,name=currentsma_phase_1,json=currentsmaPhase1,proto3" json:"currentsma_phase_1,omitempty"`
	CurrentsmaPhase_2       float64 `protobuf:"fixed64,6,opt,name=currentsma_phase_2,json=currentsmaPhase2,proto3" json:"currentsma_phase_2,omitempty"`
	PoweractivesmaPhase_0   float64 `protobuf:"fixed64,7,opt,name=poweractivesma_phase_0,json=poweractivesmaPhase0,proto3" json:"poweractivesma_phase_0,omitempty"`
	PoweractivesmaPhase_1   float64 `protobuf:"fixed64,8,opt,name=poweractivesma_phase_1,json=poweractivesmaPhase1,proto3" json:"poweractivesma_phase_1,omitempty"`
	PoweractivesmaPhase_2   float64 `protobuf:"fixed64,9,opt,name=poweractivesma_phase_2,json=poweractivesmaPhase2,proto3" json:"poweractivesma_phase_2,omitempty"`
	PowerreactivesmaPhase_0 float64 `protobuf:"fixed64,10,opt,name=powerreactivesma_phase_0,json=powerreactivesmaPhase0,proto3" json:"powerreactivesma_phase_0,omitempty"`
	PowerreactivesmaPhase_1 float64 `protobuf:"fixed64,11,opt,name=powerreactivesma_phase_1,json=powerreactivesmaPhase1,proto3" json:"powerreactivesma_phase_1,omitempty"`
	PowerreactivesmaPhase_2 float64 `protobuf:"fixed64,12,opt,name=powerreactivesma_phase_2,json=powerreactivesmaPhase2,proto3" json:"powerreactivesma_phase_2,omitempty"`
	PowerapparentsmaPhase_0 float64 `protobuf:"fixed64,13,opt,name=powerapparentsma_phase_0,json=powerapparentsmaPhase0,proto3" json:"powerapparentsma_phase_0,omitempty"`
	PowerapparentsmaPhase_1 float64 `protobuf:"fixed64,14,opt,name=powerapparentsma_phase_1,json=powerapparentsmaPhase1,proto3" json:"powerapparentsma_phase_1,omitempty"`
	PowerapparentsmaPhase_2 float64 `protobuf:"fixed64,15,opt,name=powerapparentsma_phase_2,json=powerapparentsmaPhase2,proto3" json:"powerapparentsma_phase_2,omitempty"`
	PoweractivemaxPhase_0   float64 `protobuf:"fixed64,16,opt,name=poweractivemax_phase_0,json=poweractivemaxPhase0,proto3" json:"poweractivemax_phase_0,omitempty"`
	PoweractivemaxPhase_1   float64 `protobuf:"fixed64,17,opt,name=poweractivemax_phase_1,json=poweractivemaxPhase1,proto3" json:"poweractivemax_phase_1,omitempty"`
	PoweractivemaxPhase_2   float64 `protobuf:"fixed64,18,opt,name=poweractivemax_phase_2,json=poweractivemaxPhase2,proto3" json:"poweractivemax_phase_2,omitempty"`
	PowerreactivemaxPhase_0 float64 `protobuf:"fixed64,19,opt,name=powerreactivemax_phase_0,json=powerreactivemaxPhase0,proto3" json:"powerreactivemax_phase_0,omitempty"`
	PowerreactivemaxPhase_1 float64 `protobuf:"fixed64,20,opt,name=powerreactivemax_phase_1,json=powerreactivemaxPhase1,proto3" json:"powerreactivemax_phase_1,omitempty"`
	PowerreactivemaxPhase_2 float64 `protobuf:"fixed64,21,opt,name=powerreactivemax_phase_2,json=powerreactivemaxPhase2,proto3" json:"powerreactivemax_phase_2,omitempty"`
	PowerapparentmaxPhase_0 float64 `protobuf:"fixed64,22,opt,name=powerapparentmax_phase_0,json=powerapparentmaxPhase0,proto3" json:"powerapparentmax_phase_0,omitempty"`
	PowerapparentmaxPhase_1 float64 `protobuf:"fixed64,23,opt,name=powerapparentmax_phase_1,json=powerapparentmaxPhase1,proto3" json:"powerapparentmax_phase_1,omitempty"`
	PowerapparentmaxPhase_2 float64 `protobuf:"fixed64,24,opt,name=powerapparentmax_phase_2,json=powerapparentmaxPhase2,proto3" json:"powerapparentmax_phase_2,omitempty"`
	PoweractiveminPhase_0   float64 `protobuf:"fixed64,25,opt,name=poweractivemin_phase_0,json=poweractiveminPhase0,proto3" json:"poweractivemin_phase_0,omitempty"`
	PoweractiveminPhase_1   float64 `protobuf:"fixed64,26,opt,name=poweractivemin_phase_1,json=poweractiveminPhase1,proto3" json:"poweractivemin_phase_1,omitempty"`
	PoweractiveminPhase_2   float64 `protobuf:"fixed64,27,opt,name=poweractivemin_phase_2,json=poweractiveminPhase2,proto3" json:"poweractivemin_phase_2,omitempty"`
	PowerreactiveminPhase_0 float64 `protobuf:"fixed64,28,opt,name=powerreactivemin_phase_0,json=powerreactiveminPhase0,proto3" json:"powerreactivemin_phase_0,omitempty"`
	PowerreactiveminPhase_1 float64 `protobuf:"fixed64,29,opt,name=powerreactivemin_phase_1,json=powerreactiveminPhase1,proto3" json:"powerreactivemin_phase_1,omitempty"`
	PowerreactiveminPhase_2 float64 `protobuf:"fixed64,30,opt,name=powerreactivemin_phase_2,json=powerreactiveminPhase2,proto3" json:"powerreactivemin_phase_2,omitempty"`
	PowerapparentminPhase_0 float64 `protobuf:"fixed64,31,opt,name=powerapparentmin_phase_0,json=powerapparentminPhase0,proto3" json:"powerapparentmin_phase_0,omitempty"`
	PowerapparentminPhase_1 float64 `protobuf:"fixed64,32,opt,name=powerapparentmin_phase_1,json=powerapparentminPhase1,proto3" json:"powerapparentmin_phase_1,omitempty"`
	PowerapparentminPhase_2 float64 `protobuf:"fixed64,33,opt,name=powerapparentmin_phase_2,json=powerapparentminPhase2,proto3" json:"powerapparentmin_phase_2,omitempty"`
}

func (x *CircuitLoadMessage) Reset() {
	*x = CircuitLoadMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ppuplink_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitLoadMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitLoadMessage) ProtoMessage() {}

func (x *CircuitLoadMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ppuplink_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitLoadMessage.ProtoReflect.Descriptor instead.
func (*CircuitLoadMessage) Descriptor() ([]byte, []int) {
	return file_ppuplink_proto_rawDescGZIP(), []int{2}
}

func (x *CircuitLoadMessage) GetDeviceeui() string {
	if x != nil {
		return x.Deviceeui
	}
	return ""
}

func (x *CircuitLoadMessage) GetTimesent() uint64 {
	if x != nil {
		return x.Timesent
	}
	return 0
}

func (x *CircuitLoadMessage) GetCircuitnumber() uint32 {
	if x != nil {
		return x.Circuitnumber
	}
	return 0
}

func (x *CircuitLoadMessage) GetCurrentsmaPhase_0() float64 {
	if x != nil {
		return x.CurrentsmaPhase_0
	}
	return 0
}

func (x *CircuitLoadMessage) GetCurrentsmaPhase_1() float64 {
	if x != nil {
		return x.CurrentsmaPhase_1
	}
	return 0
}

func (x *CircuitLoadMessage) GetCurrentsmaPhase_2() float64 {
	if x != nil {
		return x.CurrentsmaPhase_2
	}
	return 0
}

func (x *CircuitLoadMessage) GetPoweractivesmaPhase_0() float64 {
	if x != nil {
		return x.PoweractivesmaPhase_0
	}
	return 0
}

func (x *CircuitLoadMessage) GetPoweractivesmaPhase_1() float64 {
	if x != nil {
		return x.PoweractivesmaPhase_1
	}
	return 0
}

func (x *CircuitLoadMessage) GetPoweractivesmaPhase_2() float64 {
	if x != nil {
		return x.PoweractivesmaPhase_2
	}
	return 0
}

func (x *CircuitLoadMessage) GetPowerreactivesmaPhase_0() float64 {
	if x != nil {
		return x.PowerreactivesmaPhase_0
	}
	return 0
}

func (x *CircuitLoadMessage) GetPowerreactivesmaPhase_1() float64 {
	if x != nil {
		return x.PowerreactivesmaPhase_1
	}
	return 0
}

func (x *CircuitLoadMessage) GetPowerreactivesmaPhase_2() float64 {
	if x != nil {
		return x.PowerreactivesmaPhase_2
	}
	return 0
}

func (x *CircuitLoadMessage) GetPowerapparentsmaPhase_0() float64 {
	if x != nil {
		return x.PowerapparentsmaPhase_0
	}
	return 0
}

func (x *CircuitLoadMessage) GetPowerapparentsmaPhase_1() float64 {
	if x != nil {
		return x.PowerapparentsmaPhase_1
	}
	return 0
}

func (x *CircuitLoadMessage) GetPowerapparentsmaPhase_2() float64 {
	if x != nil {
		return x.PowerapparentsmaPhase_2
	}
	return 0
}

func (x *CircuitLoadMessage) GetPoweractivemaxPhase_0() float64 {
	if x != nil {
		return x.PoweractivemaxPhase_0
	}
	return 0
}

func (x *CircuitLoadMessage) GetPoweractivemaxPhase_1() float64 {
	if x != nil {
		return x.PoweractivemaxPhase_1
	}
	return 0
}

func (x *CircuitLoadMessage) GetPoweractivemaxPhase_2() float64 {
	if x != nil {
		return x.PoweractivemaxPhase_2
	}
	return 0
}

func (x *CircuitLoadMessage) GetPowerreactivemaxPhase_0() float64 {
	if x != nil {
		return x.PowerreactivemaxPhase_0
	}
	return 0
}

func (x *CircuitLoadMessage) GetPowerreactivemaxPhase_1() float64 {
	if x != nil {
		return x.PowerreactivemaxPhase_1
	}
	return 0
}

func (x *CircuitLoadMessage) GetPowerreactivemaxPhase_2() float64 {
	if x != nil {
		return x.PowerreactivemaxPhase_2
	}
	return 0
}

func (x *CircuitLoadMessage) GetPowerapparentmaxPhase_0() float64 {
	if x != nil {
		return x.PowerapparentmaxPhase_0
	}
	return 0
}

func (x *CircuitLoadMessage) GetPowerapparentmaxPhase_1() float64 {
	if x != nil {
		return x.PowerapparentmaxPhase_1
	}
	return 0
}

func (x *CircuitLoadMessage) GetPowerapparentmaxPhase_2() float64 {
	if x != nil {
		return x.PowerapparentmaxPhase_2
	}
	return 0
}

func (x *CircuitLoadMessage) GetPoweractiveminPhase_0() float64 {
	if x != nil {
		return x.PoweractiveminPhase_0
	}
	return 0
}

func (x *CircuitLoadMessage) GetPoweractiveminPhase_1() float64 {
	if x != nil {
		return x.PoweractiveminPhase_1
	}
	return 0
}

func (x *CircuitLoadMessage) GetPoweractiveminPhase_2() float64 {
	if x != nil {
		return x.PoweractiveminPhase_2
	}
	return 0
}

func (x *CircuitLoadMessage) GetPowerreactiveminPhase_0() float64 {
	if x != nil {
		return x.PowerreactiveminPhase_0
	}
	return 0
}

func (x *CircuitLoadMessage) GetPowerreactiveminPhase_1() float64 {
	if x != nil {
		return x.PowerreactiveminPhase_1
	}
	return 0
}

func (x *CircuitLoadMessage) GetPowerreactiveminPhase_2() float64 {
	if x != nil {
		return x.PowerreactiveminPhase_2
	}
	return 0
}

func (x *CircuitLoadMessage) GetPowerapparentminPhase_0() float64 {
	if x != nil {
		return x.PowerapparentminPhase_0
	}
	return 0
}

func (x *CircuitLoadMessage) GetPowerapparentminPhase_1() float64 {
	if x != nil {
		return x.PowerapparentminPhase_1
	}
	return 0
}

func (x *CircuitLoadMessage) GetPowerapparentminPhase_2() float64 {
	if x != nil {
		return x.PowerapparentminPhase_2
	}
	return 0
}

type ConfigUplinkMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deviceeui string `protobuf:"bytes,1,opt,name=deviceeui,proto3" json:"deviceeui,omitempty"`
	Slot      uint32 `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
	Index     uint32 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Firmware  string `protobuf:"bytes,4,opt,name=firmware,proto3" json:"firmware,omitempty"`
	Value     []byte `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ConfigUplinkMessage) Reset() {
	*x = ConfigUplinkMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ppuplink_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigUplinkMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigUplinkMessage) ProtoMessage() {}

func (x *ConfigUplinkMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ppuplink_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigUplinkMessage.ProtoReflect.Descriptor instead.
func (*ConfigUplinkMessage) Descriptor() ([]byte, []int) {
	return file_ppuplink_proto_rawDescGZIP(), []int{3}
}

func (x *ConfigUplinkMessage) GetDeviceeui() string {
	if x != nil {
		return x.Deviceeui
	}
	return ""
}

func (x *ConfigUplinkMessage) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *ConfigUplinkMessage) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ConfigUplinkMessage) GetFirmware() string {
	if x != nil {
		return x.Firmware
	}
	return ""
}

func (x *ConfigUplinkMessage) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type EnergyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deviceeui            string  `protobuf:"bytes,1,opt,name=deviceeui,proto3" json:"deviceeui,omitempty"`
	Timesent             uint64  `protobuf:"varint,2,opt,name=timesent,proto3" json:"timesent,omitempty"`
	Phaseid              uint32  `protobuf:"varint,3,opt,name=phaseid,proto3" json:"phaseid,omitempty"`
	Energyexportreactive float64 `protobuf:"fixed64,4,opt,name=energyexportreactive,proto3" json:"energyexportreactive,omitempty"`
	Energyimportreactive float64 `protobuf:"fixed64,5,opt,name=energyimportreactive,proto3" json:"energyimportreactive,omitempty"`
	Energyexportreal     float64 `protobuf:"fixed64,6,opt,name=energyexportreal,proto3" json:"energyexportreal,omitempty"`
	Energyimportreal     float64 `protobuf:"fixed64,7,opt,name=energyimportreal,proto3" json:"energyimportreal,omitempty"`
}

func (x *EnergyMessage) Reset() {
	*x = EnergyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ppuplink_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnergyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnergyMessage) ProtoMessage() {}

func (x *EnergyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ppuplink_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnergyMessage.ProtoReflect.Descriptor instead.
func (*EnergyMessage) Descriptor() ([]byte, []int) {
	return file_ppuplink_proto_rawDescGZIP(), []int{4}
}

func (x *EnergyMessage) GetDeviceeui() string {
	if x != nil {
		return x.Deviceeui
	}
	return ""
}

func (x *EnergyMessage) GetTimesent() uint64 {
	if x != nil {
		return x.Timesent
	}
	return 0
}

func (x *EnergyMessage) GetPhaseid() uint32 {
	if x != nil {
		return x.Phaseid
	}
	return 0
}

func (x *EnergyMessage) GetEnergyexportreactive() float64 {
	if x != nil {
		return x.Energyexportreactive
	}
	return 0
}

func (x *EnergyMessage) GetEnergyimportreactive() float64 {
	if x != nil {
		return x.Energyimportreactive
	}
	return 0
}

func (x *EnergyMessage) GetEnergyexportreal() float64 {
	if x != nil {
		return x.Energyexportreal
	}
	return 0
}

func (x *EnergyMessage) GetEnergyimportreal() float64 {
	if x != nil {
		return x.Energyimportreal
	}
	return 0
}

type GatewayMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deviceeui       string  `protobuf:"bytes,1,opt,name=deviceeui,proto3" json:"deviceeui,omitempty"`
	Timesent        uint64  `protobuf:"varint,2,opt,name=timesent,proto3" json:"timesent,omitempty"`
	Gatewayid       string  `protobuf:"bytes,3,opt,name=gatewayid,proto3" json:"gatewayid,omitempty"`
	Rssi            int32   `protobuf:"zigzag32,4,opt,name=rssi,proto3" json:"rssi,omitempty"`
	Snr             int32   `protobuf:"zigzag32,5,opt,name=snr,proto3" json:"snr,omitempty"`
	Latitude        float64 `protobuf:"fixed64,6,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude       float64 `protobuf:"fixed64,7,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Altitude        float64 `protobuf:"fixed64,8,opt,name=altitude,proto3" json:"altitude,omitempty"`
	Gatewaytimesent string  `protobuf:"bytes,9,opt,name=gatewaytimesent,proto3" json:"gatewaytimesent,omitempty"`
	Frequency       uint64  `protobuf:"varint,10,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Rawdata         string  `protobuf:"bytes,11,opt,name=rawdata,proto3" json:"rawdata,omitempty"`
}

func (x *GatewayMessage) Reset() {
	*x = GatewayMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ppuplink_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayMessage) ProtoMessage() {}

func (x *GatewayMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ppuplink_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayMessage.ProtoReflect.Descriptor instead.
func (*GatewayMessage) Descriptor() ([]byte, []int) {
	return file_ppuplink_proto_rawDescGZIP(), []int{5}
}

func (x *GatewayMessage) GetDeviceeui() string {
	if x != nil {
		return x.Deviceeui
	}
	return ""
}

func (x *GatewayMessage) GetTimesent() uint64 {
	if x != nil {
		return x.Timesent
	}
	return 0
}

func (x *GatewayMessage) GetGatewayid() string {
	if x != nil {
		return x.Gatewayid
	}
	return ""
}

func (x *GatewayMessage) GetRssi() int32 {
	if x != nil {
		return x.Rssi
	}
	return 0
}

func (x *GatewayMessage) GetSnr() int32 {
	if x != nil {
		return x.Snr
	}
	return 0
}

func (x *GatewayMessage) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GatewayMessage) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GatewayMessage) GetAltitude() float64 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *GatewayMessage) GetGatewaytimesent() string {
	if x != nil {
		return x.Gatewaytimesent
	}
	return ""
}

func (x *GatewayMessage) GetFrequency() uint64 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *GatewayMessage) GetRawdata() string {
	if x != nil {
		return x.Rawdata
	}
	return ""
}

type GeoscanMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deviceeui string `protobuf:"bytes,1,opt,name=deviceeui,proto3" json:"deviceeui,omitempty"`
	Timesent  uint64 `protobuf:"varint,2,opt,name=timesent,proto3" json:"timesent,omitempty"`
	Bssid     string `protobuf:"bytes,3,opt,name=bssid,proto3" json:"bssid,omitempty"`
	Rssid     string `protobuf:"bytes,4,opt,name=rssid,proto3" json:"rssid,omitempty"`
}

func (x *GeoscanMessage) Reset() {
	*x = GeoscanMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ppuplink_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoscanMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoscanMessage) ProtoMessage() {}

func (x *GeoscanMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ppuplink_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoscanMessage.ProtoReflect.Descriptor instead.
func (*GeoscanMessage) Descriptor() ([]byte, []int) {
	return file_ppuplink_proto_rawDescGZIP(), []int{6}
}

func (x *GeoscanMessage) GetDeviceeui() string {
	if x != nil {
		return x.Deviceeui
	}
	return ""
}

func (x *GeoscanMessage) GetTimesent() uint64 {
	if x != nil {
		return x.Timesent
	}
	return 0
}

func (x *GeoscanMessage) GetBssid() string {
	if x != nil {
		return x.Bssid
	}
	return ""
}

func (x *GeoscanMessage) GetRssid() string {
	if x != nil {
		return x.Rssid
	}
	return ""
}

type HarmonicsLowerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deviceeui        string  `protobuf:"bytes,1,opt,name=deviceeui,proto3" json:"deviceeui,omitempty"`
	Timesent         uint64  `protobuf:"varint,2,opt,name=timesent,proto3" json:"timesent,omitempty"`
	VoltageR         float64 `protobuf:"fixed64,3,opt,name=voltage_r,json=voltageR,proto3" json:"voltage_r,omitempty"`
	CurrentR         float64 `protobuf:"fixed64,4,opt,name=current_r,json=currentR,proto3" json:"current_r,omitempty"`
	VoltageW         float64 `protobuf:"fixed64,5,opt,name=voltage_w,json=voltageW,proto3" json:"voltage_w,omitempty"`
	CurrentW         float64 `protobuf:"fixed64,6,opt,name=current_w,json=currentW,proto3" json:"current_w,omitempty"`
	VoltageB         float64 `protobuf:"fixed64,7,opt,name=voltage_b,json=voltageB,proto3" json:"voltage_b,omitempty"`
	CurrentB         float64 `protobuf:"fixed64,8,opt,name=current_b,json=currentB,proto3" json:"current_b,omitempty"`
	Activepower      float64 `protobuf:"fixed64,9,opt,name=activepower,proto3" json:"activepower,omitempty"`
	Reactivepower    float64 `protobuf:"fixed64,10,opt,name=reactivepower,proto3" json:"reactivepower,omitempty"`
	ThdvR            float64 `protobuf:"fixed64,11,opt,name=thdv_r,json=thdvR,proto3" json:"thdv_r,omitempty"`
	ThdiR            float64 `protobuf:"fixed64,12,opt,name=thdi_r,json=thdiR,proto3" json:"thdi_r,omitempty"`
	ThirdharmonicR   float64 `protobuf:"fixed64,13,opt,name=thirdharmonic_r,json=thirdharmonicR,proto3" json:"thirdharmonic_r,omitempty"`
	FifthharmonicR   float64 `protobuf:"fixed64,14,opt,name=fifthharmonic_r,json=fifthharmonicR,proto3" json:"fifthharmonic_r,omitempty"`
	SeventhharmonicR float64 `protobuf:"fixed64,15,opt,name=seventhharmonic_r,json=seventhharmonicR,proto3" json:"seventhharmonic_r,omitempty"`
	ThdvW            float64 `protobuf:"fixed64,16,opt,name=thdv_w,json=thdvW,proto3" json:"thdv_w,omitempty"`
	ThdiW            float64 `protobuf:"fixed64,17,opt,name=thdi_w,json=thdiW,proto3" json:"thdi_w,omitempty"`
	ThirdharmonicW   float64 `protobuf:"fixed64,18,opt,name=thirdharmonic_w,json=thirdharmonicW,proto3" json:"thirdharmonic_w,omitempty"`
	FifthharmonicW   float64 `protobuf:"fixed64,19,opt,name=fifthharmonic_w,json=fifthharmonicW,proto3" json:"fifthharmonic_w,omitempty"`
	SeventhharmonicW float64 `protobuf:"fixed64,20,opt,name=seventhharmonic_w,json=seventhharmonicW,proto3" json:"seventhharmonic_w,omitempty"`
	ThdvB            float64 `protobuf:"fixed64,21,opt,name=thdv_b,json=thdvB,proto3" json:"thdv_b,omitempty"`
	ThdiB            float64 `protobuf:"fixed64,22,opt,name=thdi_b,json=thdiB,proto3" json:"thdi_b,omitempty"`
	ThirdharmonicB   float64 `protobuf:"fixed64,23,opt,name=thirdharmonic_b,json=thirdharmonicB,proto3" json:"thirdharmonic_b,omitempty"`
	FifthharmonicB   float64 `protobuf:"fixed64,24,opt,name=fifthharmonic_b,json=fifthharmonicB,proto3" json:"fifthharmonic_b,omitempty"`
	SeventhharmonicB float64 `protobuf:"fixed64,25,opt,name=seventhharmonic_b,json=seventhharmonicB,proto3" json:"seventhharmonic_b,omitempty"`
}

func (x *HarmonicsLowerMessage) Reset() {
	*x = HarmonicsLowerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ppuplink_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HarmonicsLowerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HarmonicsLowerMessage) ProtoMessage() {}

func (x *HarmonicsLowerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ppuplink_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HarmonicsLowerMessage.ProtoReflect.Descriptor instead.
func (*HarmonicsLowerMessage) Descriptor() ([]byte, []int) {
	return file_ppuplink_proto_rawDescGZIP(), []int{7}
}

func (x *HarmonicsLowerMessage) GetDeviceeui() string {
	if x != nil {
		return x.Deviceeui
	}
	return ""
}

func (x *HarmonicsLowerMessage) GetTimesent() uint64 {
	if x != nil {
		return x.Timesent
	}
	return 0
}

func (x *HarmonicsLowerMessage) GetVoltageR() float64 {
	if x != nil {
		return x.VoltageR
	}
	return 0
}

func (x *HarmonicsLowerMessage) GetCurrentR() float64 {
	if x != nil {
		return x.CurrentR
	}
	return 0
}

func (x *HarmonicsLowerMessage) GetVoltageW() float64 {
	if x != nil {
		return x.VoltageW
	}
	return 0
}

func (x *HarmonicsLowerMessage) GetCurrentW() float64 {
	if x != nil {
		return x.CurrentW
	}
	return 0
}

func (x *HarmonicsLowerMessage) GetVoltageB() float64 {
	if x != nil {
		return x.VoltageB
	}
	return 0
}

func (x *HarmonicsLowerMessage) GetCurrentB() float64 {
	if x != nil {
		return x.CurrentB
	}
	return 0
}

func (x *HarmonicsLowerMessage) GetActivepower() float64 {
	if x != nil {
		return x.Activepower
	}
	return 0
}

func (x *HarmonicsLowerMessage) GetReactivepower() float64 {
	if x != nil {
		return x.Reactivepower
	}
	return 0
}

func (x *HarmonicsLowerMessage) GetThdvR() float64 {
	if x != nil {
		return x.ThdvR
	}
	return 0
}

func (x *HarmonicsLowerMessage) GetThdiR() float64 {
	if x != nil {
		return x.ThdiR
	}
	return 0
}

func (x *HarmonicsLowerMessage) GetThirdharmonicR() float64 {
	if x != nil {
		return x.ThirdharmonicR
	}
	return 0
}

func (x *HarmonicsLowerMessage) GetFifthharmonicR() float64 {
	if x != nil {
		return x.FifthharmonicR
	}
	return 0
}

func (x *HarmonicsLowerMessage) GetSeventhharmonicR() float64 {
	if x != nil {
		return x.SeventhharmonicR
	}
	return 0
}

func (x *HarmonicsLowerMessage) GetThdvW() float64 {
	if x != nil {
		return x.ThdvW
	}
	return 0
}

func (x *HarmonicsLowerMessage) GetThdiW() float64 {
	if x != nil {
		return x.ThdiW
	}
	return 0
}

func (x *HarmonicsLowerMessage) GetThirdharmonicW() float64 {
	if x != nil {
		return x.ThirdharmonicW
	}
	return 0
}

func (x *HarmonicsLowerMessage) GetFifthharmonicW() float64 {
	if x != nil {
		return x.FifthharmonicW
	}
	return 0
}

func (x *HarmonicsLowerMessage) GetSeventhharmonicW() float64 {
	if x != nil {
		return x.SeventhharmonicW
	}
	return 0
}

func (x *HarmonicsLowerMessage) GetThdvB() float64 {
	if x != nil {
		return x.ThdvB
	}
	return 0
}

func (x *HarmonicsLowerMessage) GetThdiB() float64 {
	if x != nil {
		return x.ThdiB
	}
	return 0
}

func (x *HarmonicsLowerMessage) GetThirdharmonicB() float64 {
	if x != nil {
		return x.ThirdharmonicB
	}
	return 0
}

func (x *HarmonicsLowerMessage) GetFifthharmonicB() float64 {
	if x != nil {
		return x.FifthharmonicB
	}
	return 0
}

func (x *HarmonicsLowerMessage) GetSeventhharmonicB() float64 {
	if x != nil {
		return x.SeventhharmonicB
	}
	return 0
}

type HarmonicsUpperMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deviceeui           string  `protobuf:"bytes,1,opt,name=deviceeui,proto3" json:"deviceeui,omitempty"`
	Timesent            uint64  `protobuf:"varint,2,opt,name=timesent,proto3" json:"timesent,omitempty"`
	VoltageR            float64 `protobuf:"fixed64,3,opt,name=voltage_r,json=voltageR,proto3" json:"voltage_r,omitempty"`
	CurrentR            float64 `protobuf:"fixed64,4,opt,name=current_r,json=currentR,proto3" json:"current_r,omitempty"`
	VoltageW            float64 `protobuf:"fixed64,5,opt,name=voltage_w,json=voltageW,proto3" json:"voltage_w,omitempty"`
	CurrentW            float64 `protobuf:"fixed64,6,opt,name=current_w,json=currentW,proto3" json:"current_w,omitempty"`
	VoltageB            float64 `protobuf:"fixed64,7,opt,name=voltage_b,json=voltageB,proto3" json:"voltage_b,omitempty"`
	CurrentB            float64 `protobuf:"fixed64,8,opt,name=current_b,json=currentB,proto3" json:"current_b,omitempty"`
	Activepower         float64 `protobuf:"fixed64,9,opt,name=activepower,proto3" json:"activepower,omitempty"`
	Reactivepower       float64 `protobuf:"fixed64,10,opt,name=reactivepower,proto3" json:"reactivepower,omitempty"`
	ThdvR               float64 `protobuf:"fixed64,11,opt,name=thdv_r,json=thdvR,proto3" json:"thdv_r,omitempty"`
	ThdiR               float64 `protobuf:"fixed64,12,opt,name=thdi_r,json=thdiR,proto3" json:"thdi_r,omitempty"`
	NinthharmonicR      float64 `protobuf:"fixed64,13,opt,name=ninthharmonic_r,json=ninthharmonicR,proto3" json:"ninthharmonic_r,omitempty"`
	EleventhharmonicR   float64 `protobuf:"fixed64,14,opt,name=eleventhharmonic_r,json=eleventhharmonicR,proto3" json:"eleventhharmonic_r,omitempty"`
	ThirteenthharmonicR float64 `protobuf:"fixed64,15,opt,name=thirteenthharmonic_r,json=thirteenthharmonicR,proto3" json:"thirteenthharmonic_r,omitempty"`
	ThdvW               float64 `protobuf:"fixed64,16,opt,name=thdv_w,json=thdvW,proto3" json:"thdv_w,omitempty"`
	ThdiW               float64 `protobuf:"fixed64,17,opt,name=thdi_w,json=thdiW,proto3" json:"thdi_w,omitempty"`
	NinthharmonicW      float64 `protobuf:"fixed64,18,opt,name=ninthharmonic_w,json=ninthharmonicW,proto3" json:"ninthharmonic_w,omitempty"`
	EleventhharmonicW   float64 `protobuf:"fixed64,19,opt,name=eleventhharmonic_w,json=eleventhharmonicW,proto3" json:"eleventhharmonic_w,omitempty"`
	ThirteenthharmonicW float64 `protobuf:"fixed64,20,opt,name=thirteenthharmonic_w,json=thirteenthharmonicW,proto3" json:"thirteenthharmonic_w,omitempty"`
	ThdvB               float64 `protobuf:"fixed64,21,opt,name=thdv_b,json=thdvB,proto3" json:"thdv_b,omitempty"`
	ThdiB               float64 `protobuf:"fixed64,22,opt,name=thdi_b,json=thdiB,proto3" json:"thdi_b,omitempty"`
	NinthharmonicB      float64 `protobuf:"fixed64,23,opt,name=ninthharmonic_b,json=ninthharmonicB,proto3" json:"ninthharmonic_b,omitempty"`
	EleventhharmonicB   float64 `protobuf:"fixed64,24,opt,name=eleventhharmonic_b,json=eleventhharmonicB,proto3" json:"eleventhharmonic_b,omitempty"`
	ThirteenthharmonicB float64 `protobuf:"fixed64,25,opt,name=thirteenthharmonic_b,json=thirteenthharmonicB,proto3" json:"thirteenthharmonic_b,omitempty"`
}

func (x *HarmonicsUpperMessage) Reset() {
	*x = HarmonicsUpperMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ppuplink_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HarmonicsUpperMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HarmonicsUpperMessage) ProtoMessage() {}

func (x *HarmonicsUpperMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ppuplink_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HarmonicsUpperMessage.ProtoReflect.Descriptor instead.
func (*HarmonicsUpperMessage) Descriptor() ([]byte, []int) {
	return file_ppuplink_proto_rawDescGZIP(), []int{8}
}

func (x *HarmonicsUpperMessage) GetDeviceeui() string {
	if x != nil {
		return x.Deviceeui
	}
	return ""
}

func (x *HarmonicsUpperMessage) GetTimesent() uint64 {
	if x != nil {
		return x.Timesent
	}
	return 0
}

func (x *HarmonicsUpperMessage) GetVoltageR() float64 {
	if x != nil {
		return x.VoltageR
	}
	return 0
}

func (x *HarmonicsUpperMessage) GetCurrentR() float64 {
	if x != nil {
		return x.CurrentR
	}
	return 0
}

func (x *HarmonicsUpperMessage) GetVoltageW() float64 {
	if x != nil {
		return x.VoltageW
	}
	return 0
}

func (x *HarmonicsUpperMessage) GetCurrentW() float64 {
	if x != nil {
		return x.CurrentW
	}
	return 0
}

func (x *HarmonicsUpperMessage) GetVoltageB() float64 {
	if x != nil {
		return x.VoltageB
	}
	return 0
}

func (x *HarmonicsUpperMessage) GetCurrentB() float64 {
	if x != nil {
		return x.CurrentB
	}
	return 0
}

func (x *HarmonicsUpperMessage) GetActivepower() float64 {
	if x != nil {
		return x.Activepower
	}
	return 0
}

func (x *HarmonicsUpperMessage) GetReactivepower() float64 {
	if x != nil {
		return x.Reactivepower
	}
	return 0
}

func (x *HarmonicsUpperMessage) GetThdvR() float64 {
	if x != nil {
		return x.ThdvR
	}
	return 0
}

func (x *HarmonicsUpperMessage) GetThdiR() float64 {
	if x != nil {
		return x.ThdiR
	}
	return 0
}

func (x *HarmonicsUpperMessage) GetNinthharmonicR() float64 {
	if x != nil {
		return x.NinthharmonicR
	}
	return 0
}

func (x *HarmonicsUpperMessage) GetEleventhharmonicR() float64 {
	if x != nil {
		return x.EleventhharmonicR
	}
	return 0
}

func (x *HarmonicsUpperMessage) GetThirteenthharmonicR() float64 {
	if x != nil {
		return x.ThirteenthharmonicR
	}
	return 0
}

func (x *HarmonicsUpperMessage) GetThdvW() float64 {
	if x != nil {
		return x.ThdvW
	}
	return 0
}

func (x *HarmonicsUpperMessage) GetThdiW() float64 {
	if x != nil {
		return x.ThdiW
	}
	return 0
}

func (x *HarmonicsUpperMessage) GetNinthharmonicW() float64 {
	if x != nil {
		return x.NinthharmonicW
	}
	return 0
}

func (x *HarmonicsUpperMessage) GetEleventhharmonicW() float64 {
	if x != nil {
		return x.EleventhharmonicW
	}
	return 0
}

func (x *HarmonicsUpperMessage) GetThirteenthharmonicW() float64 {
	if x != nil {
		return x.ThirteenthharmonicW
	}
	return 0
}

func (x *HarmonicsUpperMessage) GetThdvB() float64 {
	if x != nil {
		return x.ThdvB
	}
	return 0
}

func (x *HarmonicsUpperMessage) GetThdiB() float64 {
	if x != nil {
		return x.ThdiB
	}
	return 0
}

func (x *HarmonicsUpperMessage) GetNinthharmonicB() float64 {
	if x != nil {
		return x.NinthharmonicB
	}
	return 0
}

func (x *HarmonicsUpperMessage) GetEleventhharmonicB() float64 {
	if x != nil {
		return x.EleventhharmonicB
	}
	return 0
}

func (x *HarmonicsUpperMessage) GetThirteenthharmonicB() float64 {
	if x != nil {
		return x.ThirteenthharmonicB
	}
	return 0
}

type HVAlarmMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deviceeui string  `protobuf:"bytes,1,opt,name=deviceeui,proto3" json:"deviceeui,omitempty"`
	Timesent  uint64  `protobuf:"varint,2,opt,name=timesent,proto3" json:"timesent,omitempty"`
	Alarmtype string  `protobuf:"bytes,3,opt,name=alarmtype,proto3" json:"alarmtype,omitempty"`
	Imbalance float64 `protobuf:"fixed64,4,opt,name=imbalance,proto3" json:"imbalance,omitempty"`
	VoltageR  float64 `protobuf:"fixed64,5,opt,name=voltage_r,json=voltageR,proto3" json:"voltage_r,omitempty"`
	VoltageW  float64 `protobuf:"fixed64,6,opt,name=voltage_w,json=voltageW,proto3" json:"voltage_w,omitempty"`
	VoltageB  float64 `protobuf:"fixed64,7,opt,name=voltage_b,json=voltageB,proto3" json:"voltage_b,omitempty"`
	VoltageAb float64 `protobuf:"fixed64,8,opt,name=voltage_ab,json=voltageAb,proto3" json:"voltage_ab,omitempty"`
	VoltageBc float64 `protobuf:"fixed64,9,opt,name=voltage_bc,json=voltageBc,proto3" json:"voltage_bc,omitempty"`
	VoltageCa float64 `protobuf:"fixed64,10,opt,name=voltage_ca,json=voltageCa,proto3" json:"voltage_ca,omitempty"`
	AngleA    float64 `protobuf:"fixed64,11,opt,name=angle_a,json=angleA,proto3" json:"angle_a,omitempty"`
	AngleB    float64 `protobuf:"fixed64,12,opt,name=angle_b,json=angleB,proto3" json:"angle_b,omitempty"`
	AngleC    float64 `protobuf:"fixed64,13,opt,name=angle_c,json=angleC,proto3" json:"angle_c,omitempty"`
}

func (x *HVAlarmMessage) Reset() {
	*x = HVAlarmMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ppuplink_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HVAlarmMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HVAlarmMessage) ProtoMessage() {}

func (x *HVAlarmMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ppuplink_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HVAlarmMessage.ProtoReflect.Descriptor instead.
func (*HVAlarmMessage) Descriptor() ([]byte, []int) {
	return file_ppuplink_proto_rawDescGZIP(), []int{9}
}

func (x *HVAlarmMessage) GetDeviceeui() string {
	if x != nil {
		return x.Deviceeui
	}
	return ""
}

func (x *HVAlarmMessage) GetTimesent() uint64 {
	if x != nil {
		return x.Timesent
	}
	return 0
}

func (x *HVAlarmMessage) GetAlarmtype() string {
	if x != nil {
		return x.Alarmtype
	}
	return ""
}

func (x *HVAlarmMessage) GetImbalance() float64 {
	if x != nil {
		return x.Imbalance
	}
	return 0
}

func (x *HVAlarmMessage) GetVoltageR() float64 {
	if x != nil {
		return x.VoltageR
	}
	return 0
}

func (x *HVAlarmMessage) GetVoltageW() float64 {
	if x != nil {
		return x.VoltageW
	}
	return 0
}

func (x *HVAlarmMessage) GetVoltageB() float64 {
	if x != nil {
		return x.VoltageB
	}
	return 0
}

func (x *HVAlarmMessage) GetVoltageAb() float64 {
	if x != nil {
		return x.VoltageAb
	}
	return 0
}

func (x *HVAlarmMessage) GetVoltageBc() float64 {
	if x != nil {
		return x.VoltageBc
	}
	return 0
}

func (x *HVAlarmMessage) GetVoltageCa() float64 {
	if x != nil {
		return x.VoltageCa
	}
	return 0
}

func (x *HVAlarmMessage) GetAngleA() float64 {
	if x != nil {
		return x.AngleA
	}
	return 0
}

func (x *HVAlarmMessage) GetAngleB() float64 {
	if x != nil {
		return x.AngleB
	}
	return 0
}

func (x *HVAlarmMessage) GetAngleC() float64 {
	if x != nil {
		return x.AngleC
	}
	return 0
}

type InstMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deviceeui     string  `protobuf:"bytes,1,opt,name=deviceeui,proto3" json:"deviceeui,omitempty"`
	Timesent      uint64  `protobuf:"varint,2,opt,name=timesent,proto3" json:"timesent,omitempty"`
	Phaseid       uint32  `protobuf:"varint,3,opt,name=phaseid,proto3" json:"phaseid,omitempty"`
	Activepower   float64 `protobuf:"fixed64,4,opt,name=activepower,proto3" json:"activepower,omitempty"`
	Reactivepower float64 `protobuf:"fixed64,5,opt,name=reactivepower,proto3" json:"reactivepower,omitempty"`
	Current       float64 `protobuf:"fixed64,6,opt,name=current,proto3" json:"current,omitempty"`
	Voltage       float64 `protobuf:"fixed64,7,opt,name=voltage,proto3" json:"voltage,omitempty"`
}

func (x *InstMessage) Reset() {
	*x = InstMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ppuplink_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstMessage) ProtoMessage() {}

func (x *InstMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ppuplink_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstMessage.ProtoReflect.Descriptor instead.
func (*InstMessage) Descriptor() ([]byte, []int) {
	return file_ppuplink_proto_rawDescGZIP(), []int{10}
}

func (x *InstMessage) GetDeviceeui() string {
	if x != nil {
		return x.Deviceeui
	}
	return ""
}

func (x *InstMessage) GetTimesent() uint64 {
	if x != nil {
		return x.Timesent
	}
	return 0
}

func (x *InstMessage) GetPhaseid() uint32 {
	if x != nil {
		return x.Phaseid
	}
	return 0
}

func (x *InstMessage) GetActivepower() float64 {
	if x != nil {
		return x.Activepower
	}
	return 0
}

func (x *InstMessage) GetReactivepower() float64 {
	if x != nil {
		return x.Reactivepower
	}
	return 0
}

func (x *InstMessage) GetCurrent() float64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *InstMessage) GetVoltage() float64 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

type InstP2PMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deviceeui      string  `protobuf:"bytes,1,opt,name=deviceeui,proto3" json:"deviceeui,omitempty"`
	Timesent       uint64  `protobuf:"varint,2,opt,name=timesent,proto3" json:"timesent,omitempty"`
	VoltageR       float64 `protobuf:"fixed64,3,opt,name=voltage_r,json=voltageR,proto3" json:"voltage_r,omitempty"`
	CurrentR       float64 `protobuf:"fixed64,4,opt,name=current_r,json=currentR,proto3" json:"current_r,omitempty"`
	VoltageW       float64 `protobuf:"fixed64,5,opt,name=voltage_w,json=voltageW,proto3" json:"voltage_w,omitempty"`
	CurrentW       float64 `protobuf:"fixed64,6,opt,name=current_w,json=currentW,proto3" json:"current_w,omitempty"`
	VoltageB       float64 `protobuf:"fixed64,7,opt,name=voltage_b,json=voltageB,proto3" json:"voltage_b,omitempty"`
	CurrentB       float64 `protobuf:"fixed64,8,opt,name=current_b,json=currentB,proto3" json:"current_b,omitempty"`
	Activepower    float64 `protobuf:"fixed64,9,opt,name=activepower,proto3" json:"activepower,omitempty"`
	Reactivepower  float64 `protobuf:"fixed64,10,opt,name=reactivepower,proto3" json:"reactivepower,omitempty"`
	ThdvR          float64 `protobuf:"fixed64,11,opt,name=thdv_r,json=thdvR,proto3" json:"thdv_r,omitempty"`
	ThdiR          float64 `protobuf:"fixed64,12,opt,name=thdi_r,json=thdiR,proto3" json:"thdi_r,omitempty"`
	ThdvW          float64 `protobuf:"fixed64,13,opt,name=thdv_w,json=thdvW,proto3" json:"thdv_w,omitempty"`
	ThdiW          float64 `protobuf:"fixed64,14,opt,name=thdi_w,json=thdiW,proto3" json:"thdi_w,omitempty"`
	ThdvB          float64 `protobuf:"fixed64,15,opt,name=thdv_b,json=thdvB,proto3" json:"thdv_b,omitempty"`
	ThdiB          float64 `protobuf:"fixed64,16,opt,name=thdi_b,json=thdiB,proto3" json:"thdi_b,omitempty"`
	VoltageAb      float64 `protobuf:"fixed64,17,opt,name=voltage_ab,json=voltageAb,proto3" json:"voltage_ab,omitempty"`
	VoltageBc      float64 `protobuf:"fixed64,18,opt,name=voltage_bc,json=voltageBc,proto3" json:"voltage_bc,omitempty"`
	VoltageCa      float64 `protobuf:"fixed64,19,opt,name=voltage_ca,json=voltageCa,proto3" json:"voltage_ca,omitempty"`
	Currentneutral float64 `protobuf:"fixed64,20,opt,name=currentneutral,proto3" json:"currentneutral,omitempty"`
}

func (x *InstP2PMessage) Reset() {
	*x = InstP2PMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ppuplink_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstP2PMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstP2PMessage) ProtoMessage() {}

func (x *InstP2PMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ppuplink_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstP2PMessage.ProtoReflect.Descriptor instead.
func (*InstP2PMessage) Descriptor() ([]byte, []int) {
	return file_ppuplink_proto_rawDescGZIP(), []int{11}
}

func (x *InstP2PMessage) GetDeviceeui() string {
	if x != nil {
		return x.Deviceeui
	}
	return ""
}

func (x *InstP2PMessage) GetTimesent() uint64 {
	if x != nil {
		return x.Timesent
	}
	return 0
}

func (x *InstP2PMessage) GetVoltageR() float64 {
	if x != nil {
		return x.VoltageR
	}
	return 0
}

func (x *InstP2PMessage) GetCurrentR() float64 {
	if x != nil {
		return x.CurrentR
	}
	return 0
}

func (x *InstP2PMessage) GetVoltageW() float64 {
	if x != nil {
		return x.VoltageW
	}
	return 0
}

func (x *InstP2PMessage) GetCurrentW() float64 {
	if x != nil {
		return x.CurrentW
	}
	return 0
}

func (x *InstP2PMessage) GetVoltageB() float64 {
	if x != nil {
		return x.VoltageB
	}
	return 0
}

func (x *InstP2PMessage) GetCurrentB() float64 {
	if x != nil {
		return x.CurrentB
	}
	return 0
}

func (x *InstP2PMessage) GetActivepower() float64 {
	if x != nil {
		return x.Activepower
	}
	return 0
}

func (x *InstP2PMessage) GetReactivepower() float64 {
	if x != nil {
		return x.Reactivepower
	}
	return 0
}

func (x *InstP2PMessage) GetThdvR() float64 {
	if x != nil {
		return x.ThdvR
	}
	return 0
}

func (x *InstP2PMessage) GetThdiR() float64 {
	if x != nil {
		return x.ThdiR
	}
	return 0
}

func (x *InstP2PMessage) GetThdvW() float64 {
	if x != nil {
		return x.ThdvW
	}
	return 0
}

func (x *InstP2PMessage) GetThdiW() float64 {
	if x != nil {
		return x.ThdiW
	}
	return 0
}

func (x *InstP2PMessage) GetThdvB() float64 {
	if x != nil {
		return x.ThdvB
	}
	return 0
}

func (x *InstP2PMessage) GetThdiB() float64 {
	if x != nil {
		return x.ThdiB
	}
	return 0
}

func (x *InstP2PMessage) GetVoltageAb() float64 {
	if x != nil {
		return x.VoltageAb
	}
	return 0
}

func (x *InstP2PMessage) GetVoltageBc() float64 {
	if x != nil {
		return x.VoltageBc
	}
	return 0
}

func (x *InstP2PMessage) GetVoltageCa() float64 {
	if x != nil {
		return x.VoltageCa
	}
	return 0
}

func (x *InstP2PMessage) GetCurrentneutral() float64 {
	if x != nil {
		return x.Currentneutral
	}
	return 0
}

type PQMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deviceeui             string  `protobuf:"bytes,1,opt,name=deviceeui,proto3" json:"deviceeui,omitempty"`
	Timesent              uint64  `protobuf:"varint,2,opt,name=timesent,proto3" json:"timesent,omitempty"`
	Phaseid               uint32  `protobuf:"varint,3,opt,name=phaseid,proto3" json:"phaseid,omitempty"`
	Voltagemax            float64 `protobuf:"fixed64,4,opt,name=voltagemax,proto3" json:"voltagemax,omitempty"`
	Currentmax            float64 `protobuf:"fixed64,5,opt,name=currentmax,proto3" json:"currentmax,omitempty"`
	Poweractivemax        float64 `protobuf:"fixed64,6,opt,name=poweractivemax,proto3" json:"poweractivemax,omitempty"`
	Powerreactivemax      float64 `protobuf:"fixed64,7,opt,name=powerreactivemax,proto3" json:"powerreactivemax,omitempty"`
	Thdvmax               float64 `protobuf:"fixed64,8,opt,name=thdvmax,proto3" json:"thdvmax,omitempty"`
	Voltagesma            float64 `protobuf:"fixed64,9,opt,name=voltagesma,proto3" json:"voltagesma,omitempty"`
	Currentsma            float64 `protobuf:"fixed64,10,opt,name=currentsma,proto3" json:"currentsma,omitempty"`
	Poweractivesma        float64 `protobuf:"fixed64,11,opt,name=poweractivesma,proto3" json:"poweractivesma,omitempty"`
	Powerreactivesma      float64 `protobuf:"fixed64,12,opt,name=powerreactivesma,proto3" json:"powerreactivesma,omitempty"`
	Thdvsma               float64 `protobuf:"fixed64,13,opt,name=thdvsma,proto3" json:"thdvsma,omitempty"`
	Voltagemin            float64 `protobuf:"fixed64,14,opt,name=voltagemin,proto3" json:"voltagemin,omitempty"`
	Currentmin            float64 `protobuf:"fixed64,15,opt,name=currentmin,proto3" json:"currentmin,omitempty"`
	Poweractivemin        float64 `protobuf:"fixed64,16,opt,name=poweractivemin,proto3" json:"poweractivemin,omitempty"`
	Powerreactivemin      float64 `protobuf:"fixed64,17,opt,name=powerreactivemin,proto3" json:"powerreactivemin,omitempty"`
	Thdvmin               float64 `protobuf:"fixed64,18,opt,name=thdvmin,proto3" json:"thdvmin,omitempty"`
	Momentarysag          int32   `protobuf:"varint,19,opt,name=momentarysag,proto3" json:"momentarysag,omitempty"`
	Momentaryswell        int32   `protobuf:"varint,20,opt,name=momentaryswell,proto3" json:"momentaryswell,omitempty"`
	Temporarysag          int32   `protobuf:"varint,21,opt,name=temporarysag,proto3" json:"temporarysag,omitempty"`
	Temporaryswell        int32   `protobuf:"varint,22,opt,name=temporaryswell,proto3" json:"temporaryswell,omitempty"`
	Sustainedundervoltage int32   `protobuf:"varint,23,opt,name=sustainedundervoltage,proto3" json:"sustainedundervoltage,omitempty"`
	Sustainedovervoltage  int32   `protobuf:"varint,24,opt,name=sustainedovervoltage,proto3" json:"sustainedovervoltage,omitempty"`
	Prolongedundervoltage int32   `protobuf:"varint,25,opt,name=prolongedundervoltage,proto3" json:"prolongedundervoltage,omitempty"`
	Prolongedovervoltage  int32   `protobuf:"varint,26,opt,name=prolongedovervoltage,proto3" json:"prolongedovervoltage,omitempty"`
	Thdisma               float64 `protobuf:"fixed64,27,opt,name=thdisma,proto3" json:"thdisma,omitempty"`
	Neutralcurrentsma     float64 `protobuf:"fixed64,28,opt,name=neutralcurrentsma,proto3" json:"neutralcurrentsma,omitempty"`
	Neutralcurrentmax     float64 `protobuf:"fixed64,29,opt,name=neutralcurrentmax,proto3" json:"neutralcurrentmax,omitempty"`
	Powerapparentsma      float64 `protobuf:"fixed64,30,opt,name=powerapparentsma,proto3" json:"powerapparentsma,omitempty"`
	Powerapparentmax      float64 `protobuf:"fixed64,31,opt,name=powerapparentmax,proto3" json:"powerapparentmax,omitempty"`
	Powerapparentmin      float64 `protobuf:"fixed64,32,opt,name=powerapparentmin,proto3" json:"powerapparentmin,omitempty"`
}

func (x *PQMessage) Reset() {
	*x = PQMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ppuplink_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PQMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PQMessage) ProtoMessage() {}

func (x *PQMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ppuplink_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PQMessage.ProtoReflect.Descriptor instead.
func (*PQMessage) Descriptor() ([]byte, []int) {
	return file_ppuplink_proto_rawDescGZIP(), []int{12}
}

func (x *PQMessage) GetDeviceeui() string {
	if x != nil {
		return x.Deviceeui
	}
	return ""
}

func (x *PQMessage) GetTimesent() uint64 {
	if x != nil {
		return x.Timesent
	}
	return 0
}

func (x *PQMessage) GetPhaseid() uint32 {
	if x != nil {
		return x.Phaseid
	}
	return 0
}

func (x *PQMessage) GetVoltagemax() float64 {
	if x != nil {
		return x.Voltagemax
	}
	return 0
}

func (x *PQMessage) GetCurrentmax() float64 {
	if x != nil {
		return x.Currentmax
	}
	return 0
}

func (x *PQMessage) GetPoweractivemax() float64 {
	if x != nil {
		return x.Poweractivemax
	}
	return 0
}

func (x *PQMessage) GetPowerreactivemax() float64 {
	if x != nil {
		return x.Powerreactivemax
	}
	return 0
}

func (x *PQMessage) GetThdvmax() float64 {
	if x != nil {
		return x.Thdvmax
	}
	return 0
}

func (x *PQMessage) GetVoltagesma() float64 {
	if x != nil {
		return x.Voltagesma
	}
	return 0
}

func (x *PQMessage) GetCurrentsma() float64 {
	if x != nil {
		return x.Currentsma
	}
	return 0
}

func (x *PQMessage) GetPoweractivesma() float64 {
	if x != nil {
		return x.Poweractivesma
	}
	return 0
}

func (x *PQMessage) GetPowerreactivesma() float64 {
	if x != nil {
		return x.Powerreactivesma
	}
	return 0
}

func (x *PQMessage) GetThdvsma() float64 {
	if x != nil {
		return x.Thdvsma
	}
	return 0
}

func (x *PQMessage) GetVoltagemin() float64 {
	if x != nil {
		return x.Voltagemin
	}
	return 0
}

func (x *PQMessage) GetCurrentmin() float64 {
	if x != nil {
		return x.Currentmin
	}
	return 0
}

func (x *PQMessage) GetPoweractivemin() float64 {
	if x != nil {
		return x.Poweractivemin
	}
	return 0
}

func (x *PQMessage) GetPowerreactivemin() float64 {
	if x != nil {
		return x.Powerreactivemin
	}
	return 0
}

func (x *PQMessage) GetThdvmin() float64 {
	if x != nil {
		return x.Thdvmin
	}
	return 0
}

func (x *PQMessage) GetMomentarysag() int32 {
	if x != nil {
		return x.Momentarysag
	}
	return 0
}

func (x *PQMessage) GetMomentaryswell() int32 {
	if x != nil {
		return x.Momentaryswell
	}
	return 0
}

func (x *PQMessage) GetTemporarysag() int32 {
	if x != nil {
		return x.Temporarysag
	}
	return 0
}

func (x *PQMessage) GetTemporaryswell() int32 {
	if x != nil {
		return x.Temporaryswell
	}
	return 0
}

func (x *PQMessage) GetSustainedundervoltage() int32 {
	if x != nil {
		return x.Sustainedundervoltage
	}
	return 0
}

func (x *PQMessage) GetSustainedovervoltage() int32 {
	if x != nil {
		return x.Sustainedovervoltage
	}
	return 0
}

func (x *PQMessage) GetProlongedundervoltage() int32 {
	if x != nil {
		return x.Prolongedundervoltage
	}
	return 0
}

func (x *PQMessage) GetProlongedovervoltage() int32 {
	if x != nil {
		return x.Prolongedovervoltage
	}
	return 0
}

func (x *PQMessage) GetThdisma() float64 {
	if x != nil {
		return x.Thdisma
	}
	return 0
}

func (x *PQMessage) GetNeutralcurrentsma() float64 {
	if x != nil {
		return x.Neutralcurrentsma
	}
	return 0
}

func (x *PQMessage) GetNeutralcurrentmax() float64 {
	if x != nil {
		return x.Neutralcurrentmax
	}
	return 0
}

func (x *PQMessage) GetPowerapparentsma() float64 {
	if x != nil {
		return x.Powerapparentsma
	}
	return 0
}

func (x *PQMessage) GetPowerapparentmax() float64 {
	if x != nil {
		return x.Powerapparentmax
	}
	return 0
}

func (x *PQMessage) GetPowerapparentmin() float64 {
	if x != nil {
		return x.Powerapparentmin
	}
	return 0
}

type PQEventsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deviceeui       string  `protobuf:"bytes,1,opt,name=deviceeui,proto3" json:"deviceeui,omitempty"`
	Timesent        uint64  `protobuf:"varint,2,opt,name=timesent,proto3" json:"timesent,omitempty"`
	Phaseid         uint32  `protobuf:"varint,3,opt,name=phaseid,proto3" json:"phaseid,omitempty"`
	Retainedvoltage float64 `protobuf:"fixed64,4,opt,name=retainedvoltage,proto3" json:"retainedvoltage,omitempty"`
	Pqeventtype     uint32  `protobuf:"varint,5,opt,name=pqeventtype,proto3" json:"pqeventtype,omitempty"`
	Pqeventduration uint32  `protobuf:"varint,6,opt,name=pqeventduration,proto3" json:"pqeventduration,omitempty"`
}

func (x *PQEventsMessage) Reset() {
	*x = PQEventsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ppuplink_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PQEventsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PQEventsMessage) ProtoMessage() {}

func (x *PQEventsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ppuplink_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PQEventsMessage.ProtoReflect.Descriptor instead.
func (*PQEventsMessage) Descriptor() ([]byte, []int) {
	return file_ppuplink_proto_rawDescGZIP(), []int{13}
}

func (x *PQEventsMessage) GetDeviceeui() string {
	if x != nil {
		return x.Deviceeui
	}
	return ""
}

func (x *PQEventsMessage) GetTimesent() uint64 {
	if x != nil {
		return x.Timesent
	}
	return 0
}

func (x *PQEventsMessage) GetPhaseid() uint32 {
	if x != nil {
		return x.Phaseid
	}
	return 0
}

func (x *PQEventsMessage) GetRetainedvoltage() float64 {
	if x != nil {
		return x.Retainedvoltage
	}
	return 0
}

func (x *PQEventsMessage) GetPqeventtype() uint32 {
	if x != nil {
		return x.Pqeventtype
	}
	return 0
}

func (x *PQEventsMessage) GetPqeventduration() uint32 {
	if x != nil {
		return x.Pqeventduration
	}
	return 0
}

type ProcessedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deviceeui              string  `protobuf:"bytes,1,opt,name=deviceeui,proto3" json:"deviceeui,omitempty"`
	Timesent               uint64  `protobuf:"varint,2,opt,name=timesent,proto3" json:"timesent,omitempty"`
	Phaseid                uint32  `protobuf:"varint,3,opt,name=phaseid,proto3" json:"phaseid,omitempty"`
	Loopimpedance          float64 `protobuf:"fixed64,4,opt,name=loopimpedance,proto3" json:"loopimpedance,omitempty"`
	Rssi                   int32   `protobuf:"zigzag32,5,opt,name=rssi,proto3" json:"rssi,omitempty"`
	Snr                    int32   `protobuf:"zigzag32,6,opt,name=snr,proto3" json:"snr,omitempty"`
	Alivecnt               uint32  `protobuf:"varint,7,opt,name=alivecnt,proto3" json:"alivecnt,omitempty"`
	Saifi                  int32   `protobuf:"varint,8,opt,name=saifi,proto3" json:"saifi,omitempty"`
	Memfree                int32   `protobuf:"varint,9,opt,name=memfree,proto3" json:"memfree,omitempty"`
	Tempcnt                uint32  `protobuf:"varint,10,opt,name=tempcnt,proto3" json:"tempcnt,omitempty"`
	Sustainedcnt           uint32  `protobuf:"varint,11,opt,name=sustainedcnt,proto3" json:"sustainedcnt,omitempty"`
	Prolongedcnt           uint32  `protobuf:"varint,12,opt,name=prolongedcnt,proto3" json:"prolongedcnt,omitempty"`
	Mdi                    int32   `protobuf:"varint,13,opt,name=mdi,proto3" json:"mdi,omitempty"`
	Mditimestamp           uint64  `protobuf:"varint,14,opt,name=mditimestamp,proto3" json:"mditimestamp,omitempty"`
	Voltageunbalancefactor float64 `protobuf:"fixed64,15,opt,name=voltageunbalancefactor,proto3" json:"voltageunbalancefactor,omitempty"`
	Stateofhealth          float64 `protobuf:"fixed64,16,opt,name=stateofhealth,proto3" json:"stateofhealth,omitempty"`
}

func (x *ProcessedMessage) Reset() {
	*x = ProcessedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ppuplink_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessedMessage) ProtoMessage() {}

func (x *ProcessedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ppuplink_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessedMessage.ProtoReflect.Descriptor instead.
func (*ProcessedMessage) Descriptor() ([]byte, []int) {
	return file_ppuplink_proto_rawDescGZIP(), []int{14}
}

func (x *ProcessedMessage) GetDeviceeui() string {
	if x != nil {
		return x.Deviceeui
	}
	return ""
}

func (x *ProcessedMessage) GetTimesent() uint64 {
	if x != nil {
		return x.Timesent
	}
	return 0
}

func (x *ProcessedMessage) GetPhaseid() uint32 {
	if x != nil {
		return x.Phaseid
	}
	return 0
}

func (x *ProcessedMessage) GetLoopimpedance() float64 {
	if x != nil {
		return x.Loopimpedance
	}
	return 0
}

func (x *ProcessedMessage) GetRssi() int32 {
	if x != nil {
		return x.Rssi
	}
	return 0
}

func (x *ProcessedMessage) GetSnr() int32 {
	if x != nil {
		return x.Snr
	}
	return 0
}

func (x *ProcessedMessage) GetAlivecnt() uint32 {
	if x != nil {
		return x.Alivecnt
	}
	return 0
}

func (x *ProcessedMessage) GetSaifi() int32 {
	if x != nil {
		return x.Saifi
	}
	return 0
}

func (x *ProcessedMessage) GetMemfree() int32 {
	if x != nil {
		return x.Memfree
	}
	return 0
}

func (x *ProcessedMessage) GetTempcnt() uint32 {
	if x != nil {
		return x.Tempcnt
	}
	return 0
}

func (x *ProcessedMessage) GetSustainedcnt() uint32 {
	if x != nil {
		return x.Sustainedcnt
	}
	return 0
}

func (x *ProcessedMessage) GetProlongedcnt() uint32 {
	if x != nil {
		return x.Prolongedcnt
	}
	return 0
}

func (x *ProcessedMessage) GetMdi() int32 {
	if x != nil {
		return x.Mdi
	}
	return 0
}

func (x *ProcessedMessage) GetMditimestamp() uint64 {
	if x != nil {
		return x.Mditimestamp
	}
	return 0
}

func (x *ProcessedMessage) GetVoltageunbalancefactor() float64 {
	if x != nil {
		return x.Voltageunbalancefactor
	}
	return 0
}

func (x *ProcessedMessage) GetStateofhealth() float64 {
	if x != nil {
		return x.Stateofhealth
	}
	return 0
}

type ResendResponseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deviceeui   string `protobuf:"bytes,1,opt,name=deviceeui,proto3" json:"deviceeui,omitempty"`
	Timesent    uint64 `protobuf:"varint,2,opt,name=timesent,proto3" json:"timesent,omitempty"`
	Messageid   uint32 `protobuf:"varint,3,opt,name=messageid,proto3" json:"messageid,omitempty"`
	Messagetype uint32 `protobuf:"varint,4,opt,name=messagetype,proto3" json:"messagetype,omitempty"`
	Spare       int32  `protobuf:"varint,5,opt,name=spare,proto3" json:"spare,omitempty"`
	State       int32  `protobuf:"varint,6,opt,name=state,proto3" json:"state,omitempty"`
	Error       int32  `protobuf:"varint,7,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ResendResponseMessage) Reset() {
	*x = ResendResponseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ppuplink_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResendResponseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResendResponseMessage) ProtoMessage() {}

func (x *ResendResponseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ppuplink_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResendResponseMessage.ProtoReflect.Descriptor instead.
func (*ResendResponseMessage) Descriptor() ([]byte, []int) {
	return file_ppuplink_proto_rawDescGZIP(), []int{15}
}

func (x *ResendResponseMessage) GetDeviceeui() string {
	if x != nil {
		return x.Deviceeui
	}
	return ""
}

func (x *ResendResponseMessage) GetTimesent() uint64 {
	if x != nil {
		return x.Timesent
	}
	return 0
}

func (x *ResendResponseMessage) GetMessageid() uint32 {
	if x != nil {
		return x.Messageid
	}
	return 0
}

func (x *ResendResponseMessage) GetMessagetype() uint32 {
	if x != nil {
		return x.Messagetype
	}
	return 0
}

func (x *ResendResponseMessage) GetSpare() int32 {
	if x != nil {
		return x.Spare
	}
	return 0
}

func (x *ResendResponseMessage) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *ResendResponseMessage) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

type S11PQMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deviceeui             string  `protobuf:"bytes,1,opt,name=deviceeui,proto3" json:"deviceeui,omitempty"`
	Timesent              uint64  `protobuf:"varint,2,opt,name=timesent,proto3" json:"timesent,omitempty"`
	Phaseid               uint32  `protobuf:"varint,3,opt,name=phaseid,proto3" json:"phaseid,omitempty"`
	Address               uint32  `protobuf:"varint,4,opt,name=address,proto3" json:"address,omitempty"`
	Voltagemax            float64 `protobuf:"fixed64,5,opt,name=voltagemax,proto3" json:"voltagemax,omitempty"`
	Currentmax            float64 `protobuf:"fixed64,6,opt,name=currentmax,proto3" json:"currentmax,omitempty"`
	Poweractivemax        float64 `protobuf:"fixed64,7,opt,name=poweractivemax,proto3" json:"poweractivemax,omitempty"`
	Powerreactivemax      float64 `protobuf:"fixed64,8,opt,name=powerreactivemax,proto3" json:"powerreactivemax,omitempty"`
	Thdvmax               float64 `protobuf:"fixed64,9,opt,name=thdvmax,proto3" json:"thdvmax,omitempty"`
	Voltagesma            float64 `protobuf:"fixed64,10,opt,name=voltagesma,proto3" json:"voltagesma,omitempty"`
	Currentsma            float64 `protobuf:"fixed64,11,opt,name=currentsma,proto3" json:"currentsma,omitempty"`
	Poweractivesma        float64 `protobuf:"fixed64,12,opt,name=poweractivesma,proto3" json:"poweractivesma,omitempty"`
	Powerreactivesma      float64 `protobuf:"fixed64,13,opt,name=powerreactivesma,proto3" json:"powerreactivesma,omitempty"`
	Thdvsma               float64 `protobuf:"fixed64,14,opt,name=thdvsma,proto3" json:"thdvsma,omitempty"`
	Voltagemin            float64 `protobuf:"fixed64,15,opt,name=voltagemin,proto3" json:"voltagemin,omitempty"`
	Currentmin            float64 `protobuf:"fixed64,16,opt,name=currentmin,proto3" json:"currentmin,omitempty"`
	Poweractivemin        float64 `protobuf:"fixed64,17,opt,name=poweractivemin,proto3" json:"poweractivemin,omitempty"`
	Powerreactivemin      float64 `protobuf:"fixed64,18,opt,name=powerreactivemin,proto3" json:"powerreactivemin,omitempty"`
	Thdvmin               float64 `protobuf:"fixed64,19,opt,name=thdvmin,proto3" json:"thdvmin,omitempty"`
	Momentarysag          int32   `protobuf:"varint,20,opt,name=momentarysag,proto3" json:"momentarysag,omitempty"`
	Momentaryswell        int32   `protobuf:"varint,21,opt,name=momentaryswell,proto3" json:"momentaryswell,omitempty"`
	Temporarysag          int32   `protobuf:"varint,22,opt,name=temporarysag,proto3" json:"temporarysag,omitempty"`
	Temporaryswell        int32   `protobuf:"varint,23,opt,name=temporaryswell,proto3" json:"temporaryswell,omitempty"`
	Sustainedundervoltage int32   `protobuf:"varint,24,opt,name=sustainedundervoltage,proto3" json:"sustainedundervoltage,omitempty"`
	Sustainedovervoltage  int32   `protobuf:"varint,25,opt,name=sustainedovervoltage,proto3" json:"sustainedovervoltage,omitempty"`
	Prolongedundervoltage int32   `protobuf:"varint,26,opt,name=prolongedundervoltage,proto3" json:"prolongedundervoltage,omitempty"`
	Prolongedovervoltage  int32   `protobuf:"varint,27,opt,name=prolongedovervoltage,proto3" json:"prolongedovervoltage,omitempty"`
}

func (x *S11PQMessage) Reset() {
	*x = S11PQMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ppuplink_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S11PQMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S11PQMessage) ProtoMessage() {}

func (x *S11PQMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ppuplink_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S11PQMessage.ProtoReflect.Descriptor instead.
func (*S11PQMessage) Descriptor() ([]byte, []int) {
	return file_ppuplink_proto_rawDescGZIP(), []int{16}
}

func (x *S11PQMessage) GetDeviceeui() string {
	if x != nil {
		return x.Deviceeui
	}
	return ""
}

func (x *S11PQMessage) GetTimesent() uint64 {
	if x != nil {
		return x.Timesent
	}
	return 0
}

func (x *S11PQMessage) GetPhaseid() uint32 {
	if x != nil {
		return x.Phaseid
	}
	return 0
}

func (x *S11PQMessage) GetAddress() uint32 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *S11PQMessage) GetVoltagemax() float64 {
	if x != nil {
		return x.Voltagemax
	}
	return 0
}

func (x *S11PQMessage) GetCurrentmax() float64 {
	if x != nil {
		return x.Currentmax
	}
	return 0
}

func (x *S11PQMessage) GetPoweractivemax() float64 {
	if x != nil {
		return x.Poweractivemax
	}
	return 0
}

func (x *S11PQMessage) GetPowerreactivemax() float64 {
	if x != nil {
		return x.Powerreactivemax
	}
	return 0
}

func (x *S11PQMessage) GetThdvmax() float64 {
	if x != nil {
		return x.Thdvmax
	}
	return 0
}

func (x *S11PQMessage) GetVoltagesma() float64 {
	if x != nil {
		return x.Voltagesma
	}
	return 0
}

func (x *S11PQMessage) GetCurrentsma() float64 {
	if x != nil {
		return x.Currentsma
	}
	return 0
}

func (x *S11PQMessage) GetPoweractivesma() float64 {
	if x != nil {
		return x.Poweractivesma
	}
	return 0
}

func (x *S11PQMessage) GetPowerreactivesma() float64 {
	if x != nil {
		return x.Powerreactivesma
	}
	return 0
}

func (x *S11PQMessage) GetThdvsma() float64 {
	if x != nil {
		return x.Thdvsma
	}
	return 0
}

func (x *S11PQMessage) GetVoltagemin() float64 {
	if x != nil {
		return x.Voltagemin
	}
	return 0
}

func (x *S11PQMessage) GetCurrentmin() float64 {
	if x != nil {
		return x.Currentmin
	}
	return 0
}

func (x *S11PQMessage) GetPoweractivemin() float64 {
	if x != nil {
		return x.Poweractivemin
	}
	return 0
}

func (x *S11PQMessage) GetPowerreactivemin() float64 {
	if x != nil {
		return x.Powerreactivemin
	}
	return 0
}

func (x *S11PQMessage) GetThdvmin() float64 {
	if x != nil {
		return x.Thdvmin
	}
	return 0
}

func (x *S11PQMessage) GetMomentarysag() int32 {
	if x != nil {
		return x.Momentarysag
	}
	return 0
}

func (x *S11PQMessage) GetMomentaryswell() int32 {
	if x != nil {
		return x.Momentaryswell
	}
	return 0
}

func (x *S11PQMessage) GetTemporarysag() int32 {
	if x != nil {
		return x.Temporarysag
	}
	return 0
}

func (x *S11PQMessage) GetTemporaryswell() int32 {
	if x != nil {
		return x.Temporaryswell
	}
	return 0
}

func (x *S11PQMessage) GetSustainedundervoltage() int32 {
	if x != nil {
		return x.Sustainedundervoltage
	}
	return 0
}

func (x *S11PQMessage) GetSustainedovervoltage() int32 {
	if x != nil {
		return x.Sustainedovervoltage
	}
	return 0
}

func (x *S11PQMessage) GetProlongedundervoltage() int32 {
	if x != nil {
		return x.Prolongedundervoltage
	}
	return 0
}

func (x *S11PQMessage) GetProlongedovervoltage() int32 {
	if x != nil {
		return x.Prolongedovervoltage
	}
	return 0
}

type TimeSyncRequestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deviceeui string `protobuf:"bytes,1,opt,name=deviceeui,proto3" json:"deviceeui,omitempty"`
	Timesent  uint64 `protobuf:"varint,2,opt,name=timesent,proto3" json:"timesent,omitempty"`
}

func (x *TimeSyncRequestMessage) Reset() {
	*x = TimeSyncRequestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ppuplink_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeSyncRequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSyncRequestMessage) ProtoMessage() {}

func (x *TimeSyncRequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ppuplink_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSyncRequestMessage.ProtoReflect.Descriptor instead.
func (*TimeSyncRequestMessage) Descriptor() ([]byte, []int) {
	return file_ppuplink_proto_rawDescGZIP(), []int{17}
}

func (x *TimeSyncRequestMessage) GetDeviceeui() string {
	if x != nil {
		return x.Deviceeui
	}
	return ""
}

func (x *TimeSyncRequestMessage) GetTimesent() uint64 {
	if x != nil {
		return x.Timesent
	}
	return 0
}

type UplinkMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deviceeui   string `protobuf:"bytes,1,opt,name=deviceeui,proto3" json:"deviceeui,omitempty"`
	Timesent    uint64 `protobuf:"varint,2,opt,name=timesent,proto3" json:"timesent,omitempty"`
	Rssi        int32  `protobuf:"zigzag32,3,opt,name=rssi,proto3" json:"rssi,omitempty"`
	Snr         int32  `protobuf:"zigzag32,4,opt,name=snr,proto3" json:"snr,omitempty"`
	Frequency   uint64 `protobuf:"varint,5,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Fctn        uint64 `protobuf:"varint,6,opt,name=fctn,proto3" json:"fctn,omitempty"`
	Rawdata     string `protobuf:"bytes,7,opt,name=rawdata,proto3" json:"rawdata,omitempty"`
	Messageid   uint32 `protobuf:"varint,8,opt,name=messageid,proto3" json:"messageid,omitempty"`
	Messagetype uint32 `protobuf:"varint,9,opt,name=messagetype,proto3" json:"messagetype,omitempty"`
	Resent      uint32 `protobuf:"varint,10,opt,name=resent,proto3" json:"resent,omitempty"`
}

func (x *UplinkMessage) Reset() {
	*x = UplinkMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ppuplink_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UplinkMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UplinkMessage) ProtoMessage() {}

func (x *UplinkMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ppuplink_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UplinkMessage.ProtoReflect.Descriptor instead.
func (*UplinkMessage) Descriptor() ([]byte, []int) {
	return file_ppuplink_proto_rawDescGZIP(), []int{18}
}

func (x *UplinkMessage) GetDeviceeui() string {
	if x != nil {
		return x.Deviceeui
	}
	return ""
}

func (x *UplinkMessage) GetTimesent() uint64 {
	if x != nil {
		return x.Timesent
	}
	return 0
}

func (x *UplinkMessage) GetRssi() int32 {
	if x != nil {
		return x.Rssi
	}
	return 0
}

func (x *UplinkMessage) GetSnr() int32 {
	if x != nil {
		return x.Snr
	}
	return 0
}

func (x *UplinkMessage) GetFrequency() uint64 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *UplinkMessage) GetFctn() uint64 {
	if x != nil {
		return x.Fctn
	}
	return 0
}

func (x *UplinkMessage) GetRawdata() string {
	if x != nil {
		return x.Rawdata
	}
	return ""
}

func (x *UplinkMessage) GetMessageid() uint32 {
	if x != nil {
		return x.Messageid
	}
	return 0
}

func (x *UplinkMessage) GetMessagetype() uint32 {
	if x != nil {
		return x.Messagetype
	}
	return 0
}

func (x *UplinkMessage) GetResent() uint32 {
	if x != nil {
		return x.Resent
	}
	return 0
}

type VoltageStatsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deviceeui string  `protobuf:"bytes,1,opt,name=deviceeui,proto3" json:"deviceeui,omitempty"`
	Timesent  uint64  `protobuf:"varint,2,opt,name=timesent,proto3" json:"timesent,omitempty"`
	Phaseid   uint32  `protobuf:"varint,3,opt,name=phaseid,proto3" json:"phaseid,omitempty"`
	Mean      float64 `protobuf:"fixed64,4,opt,name=mean,proto3" json:"mean,omitempty"`
	Variance  float64 `protobuf:"fixed64,5,opt,name=variance,proto3" json:"variance,omitempty"`
	Starttime string  `protobuf:"bytes,6,opt,name=starttime,proto3" json:"starttime,omitempty"`
	Stoptime  string  `protobuf:"bytes,7,opt,name=stoptime,proto3" json:"stoptime,omitempty"`
	H0_213    int64   `protobuf:"varint,8,opt,name=h0_213,json=h0213,proto3" json:"h0_213,omitempty"`
	H213_215  int64   `protobuf:"varint,9,opt,name=h213_215,json=h213215,proto3" json:"h213_215,omitempty"`
	H215_217  int64   `protobuf:"varint,10,opt,name=h215_217,json=h215217,proto3" json:"h215_217,omitempty"`
	H217_219  int64   `protobuf:"varint,11,opt,name=h217_219,json=h217219,proto3" json:"h217_219,omitempty"`
	H219_221  int64   `protobuf:"varint,12,opt,name=h219_221,json=h219221,proto3" json:"h219_221,omitempty"`
	H221_223  int64   `protobuf:"varint,13,opt,name=h221_223,json=h221223,proto3" json:"h221_223,omitempty"`
	H223_225  int64   `protobuf:"varint,14,opt,name=h223_225,json=h223225,proto3" json:"h223_225,omitempty"`
	H225_227  int64   `protobuf:"varint,15,opt,name=h225_227,json=h225227,proto3" json:"h225_227,omitempty"`
	H227_229  int64   `protobuf:"varint,16,opt,name=h227_229,json=h227229,proto3" json:"h227_229,omitempty"`
	H229_231  int64   `protobuf:"varint,17,opt,name=h229_231,json=h229231,proto3" json:"h229_231,omitempty"`
	H231_233  int64   `protobuf:"varint,18,opt,name=h231_233,json=h231233,proto3" json:"h231_233,omitempty"`
	H233_235  int64   `protobuf:"varint,19,opt,name=h233_235,json=h233235,proto3" json:"h233_235,omitempty"`
	H235_237  int64   `protobuf:"varint,20,opt,name=h235_237,json=h235237,proto3" json:"h235_237,omitempty"`
	H237_239  int64   `protobuf:"varint,21,opt,name=h237_239,json=h237239,proto3" json:"h237_239,omitempty"`
	H239_241  int64   `protobuf:"varint,22,opt,name=h239_241,json=h239241,proto3" json:"h239_241,omitempty"`
	H241_243  int64   `protobuf:"varint,23,opt,name=h241_243,json=h241243,proto3" json:"h241_243,omitempty"`
	H243_245  int64   `protobuf:"varint,24,opt,name=h243_245,json=h243245,proto3" json:"h243_245,omitempty"`
	H245_247  int64   `protobuf:"varint,25,opt,name=h245_247,json=h245247,proto3" json:"h245_247,omitempty"`
	H247_249  int64   `protobuf:"varint,26,opt,name=h247_249,json=h247249,proto3" json:"h247_249,omitempty"`
	H249_300  int64   `protobuf:"varint,27,opt,name=h249_300,json=h249300,proto3" json:"h249_300,omitempty"`
}

func (x *VoltageStatsMessage) Reset() {
	*x = VoltageStatsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ppuplink_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoltageStatsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoltageStatsMessage) ProtoMessage() {}

func (x *VoltageStatsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ppuplink_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoltageStatsMessage.ProtoReflect.Descriptor instead.
func (*VoltageStatsMessage) Descriptor() ([]byte, []int) {
	return file_ppuplink_proto_rawDescGZIP(), []int{19}
}

func (x *VoltageStatsMessage) GetDeviceeui() string {
	if x != nil {
		return x.Deviceeui
	}
	return ""
}

func (x *VoltageStatsMessage) GetTimesent() uint64 {
	if x != nil {
		return x.Timesent
	}
	return 0
}

func (x *VoltageStatsMessage) GetPhaseid() uint32 {
	if x != nil {
		return x.Phaseid
	}
	return 0
}

func (x *VoltageStatsMessage) GetMean() float64 {
	if x != nil {
		return x.Mean
	}
	return 0
}

func (x *VoltageStatsMessage) GetVariance() float64 {
	if x != nil {
		return x.Variance
	}
	return 0
}

func (x *VoltageStatsMessage) GetStarttime() string {
	if x != nil {
		return x.Starttime
	}
	return ""
}

func (x *VoltageStatsMessage) GetStoptime() string {
	if x != nil {
		return x.Stoptime
	}
	return ""
}

func (x *VoltageStatsMessage) GetH0_213() int64 {
	if x != nil {
		return x.H0_213
	}
	return 0
}

func (x *VoltageStatsMessage) GetH213_215() int64 {
	if x != nil {
		return x.H213_215
	}
	return 0
}

func (x *VoltageStatsMessage) GetH215_217() int64 {
	if x != nil {
		return x.H215_217
	}
	return 0
}

func (x *VoltageStatsMessage) GetH217_219() int64 {
	if x != nil {
		return x.H217_219
	}
	return 0
}

func (x *VoltageStatsMessage) GetH219_221() int64 {
	if x != nil {
		return x.H219_221
	}
	return 0
}

func (x *VoltageStatsMessage) GetH221_223() int64 {
	if x != nil {
		return x.H221_223
	}
	return 0
}

func (x *VoltageStatsMessage) GetH223_225() int64 {
	if x != nil {
		return x.H223_225
	}
	return 0
}

func (x *VoltageStatsMessage) GetH225_227() int64 {
	if x != nil {
		return x.H225_227
	}
	return 0
}

func (x *VoltageStatsMessage) GetH227_229() int64 {
	if x != nil {
		return x.H227_229
	}
	return 0
}

func (x *VoltageStatsMessage) GetH229_231() int64 {
	if x != nil {
		return x.H229_231
	}
	return 0
}

func (x *VoltageStatsMessage) GetH231_233() int64 {
	if x != nil {
		return x.H231_233
	}
	return 0
}

func (x *VoltageStatsMessage) GetH233_235() int64 {
	if x != nil {
		return x.H233_235
	}
	return 0
}

func (x *VoltageStatsMessage) GetH235_237() int64 {
	if x != nil {
		return x.H235_237
	}
	return 0
}

func (x *VoltageStatsMessage) GetH237_239() int64 {
	if x != nil {
		return x.H237_239
	}
	return 0
}

func (x *VoltageStatsMessage) GetH239_241() int64 {
	if x != nil {
		return x.H239_241
	}
	return 0
}

func (x *VoltageStatsMessage) GetH241_243() int64 {
	if x != nil {
		return x.H241_243
	}
	return 0
}

func (x *VoltageStatsMessage) GetH243_245() int64 {
	if x != nil {
		return x.H243_245
	}
	return 0
}

func (x *VoltageStatsMessage) GetH245_247() int64 {
	if x != nil {
		return x.H245_247
	}
	return 0
}

func (x *VoltageStatsMessage) GetH247_249() int64 {
	if x != nil {
		return x.H247_249
	}
	return 0
}

func (x *VoltageStatsMessage) GetH249_300() int64 {
	if x != nil {
		return x.H249_300
	}
	return 0
}

var File_ppuplink_proto protoreflect.FileDescriptor

var file_ppuplink_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x70, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x70, 0x70, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x96, 0x01, 0x0a, 0x0c, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xc6, 0x03, 0x0a, 0x14, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x45,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15,
	0x72, 0x65, 0x61, 0x6c, 0x6e, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x30, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x72, 0x65, 0x61,
	0x6c, 0x6e, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x50, 0x68, 0x61, 0x73, 0x65, 0x30,
	0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x30, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x17, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x50, 0x68, 0x61, 0x73, 0x65, 0x30, 0x12, 0x32, 0x0a, 0x15,
	0x72, 0x65, 0x61, 0x6c, 0x6e, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x72, 0x65, 0x61,
	0x6c, 0x6e, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x50, 0x68, 0x61, 0x73, 0x65, 0x31,
	0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x31, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x17, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x50, 0x68, 0x61, 0x73, 0x65, 0x31, 0x12, 0x32, 0x0a, 0x15,
	0x72, 0x65, 0x61, 0x6c, 0x6e, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x72, 0x65, 0x61,
	0x6c, 0x6e, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x50, 0x68, 0x61, 0x73, 0x65, 0x32,
	0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x32, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x17, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x50, 0x68, 0x61, 0x73, 0x65, 0x32, 0x22, 0xf8, 0x0d, 0x0a,
	0x12, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75,
	0x69, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x6d,
	0x61, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x30, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x6d, 0x61, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x30, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x6d, 0x61, 0x5f,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x6d, 0x61, 0x50, 0x68, 0x61, 0x73, 0x65, 0x31, 0x12,
	0x2c, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x6d, 0x61, 0x5f, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x73, 0x6d, 0x61, 0x50, 0x68, 0x61, 0x73, 0x65, 0x32, 0x12, 0x34, 0x0a,
	0x16, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x6d, 0x61, 0x5f,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x30, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x6d, 0x61, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x30, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x6d, 0x61, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x31, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x14, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x73, 0x6d, 0x61, 0x50, 0x68, 0x61, 0x73, 0x65, 0x31, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x6d, 0x61, 0x5f, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x6d, 0x61, 0x50, 0x68, 0x61, 0x73, 0x65, 0x32, 0x12,
	0x38, 0x0a, 0x18, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x73, 0x6d, 0x61, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x30, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x16, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x73, 0x6d, 0x61, 0x50, 0x68, 0x61, 0x73, 0x65, 0x30, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x6d, 0x61, 0x5f, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x6d, 0x61, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x31, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x73, 0x6d, 0x61, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x32, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x73, 0x6d, 0x61, 0x50, 0x68, 0x61, 0x73, 0x65, 0x32, 0x12, 0x38, 0x0a,
	0x18, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x6d,
	0x61, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x30, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x16, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x6d,
	0x61, 0x50, 0x68, 0x61, 0x73, 0x65, 0x30, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x6d, 0x61, 0x5f, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x31, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x6d, 0x61, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x31, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x73, 0x6d, 0x61, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x32, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x16, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x73, 0x6d, 0x61, 0x50, 0x68, 0x61, 0x73, 0x65, 0x32, 0x12, 0x34, 0x0a, 0x16, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x30, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x78, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x30, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x6d, 0x61, 0x78, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x31, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x14, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x61,
	0x78, 0x50, 0x68, 0x61, 0x73, 0x65, 0x31, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x32, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x78, 0x50, 0x68, 0x61, 0x73, 0x65, 0x32, 0x12, 0x38, 0x0a,
	0x18, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x61,
	0x78, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x30, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x16, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x61,
	0x78, 0x50, 0x68, 0x61, 0x73, 0x65, 0x30, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x31, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x78, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x31, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x32, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x16, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x6d, 0x61, 0x78, 0x50, 0x68, 0x61, 0x73, 0x65, 0x32, 0x12, 0x38, 0x0a, 0x18, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x78, 0x5f,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x30, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x78, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x30, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x70,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x31, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x70,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x78, 0x50, 0x68, 0x61, 0x73, 0x65, 0x31, 0x12,
	0x38, 0x0a, 0x18, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x6d, 0x61, 0x78, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x32, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x16, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x6d, 0x61, 0x78, 0x50, 0x68, 0x61, 0x73, 0x65, 0x32, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x30, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x69, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x30, 0x12,
	0x34, 0x0a, 0x16, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x69,
	0x6e, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x31, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x14, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x69, 0x6e, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x31, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x32, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x6d, 0x69, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x32, 0x12, 0x38, 0x0a, 0x18, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x69, 0x6e, 0x5f,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x30, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x69, 0x6e, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x30, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x31, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x69, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x31, 0x12,
	0x38, 0x0a, 0x18, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x32, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x16, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x6d, 0x69, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x32, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x30, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x6d, 0x69, 0x6e, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x30, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x70, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x31, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x70, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x6d, 0x69, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x31, 0x12, 0x38, 0x0a,
	0x18, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x6d, 0x69,
	0x6e, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x32, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x16, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x6d, 0x69,
	0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x32, 0x22, 0x8f, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6c, 0x6f,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa3, 0x02, 0x0a, 0x0d, 0x45, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x69, 0x64, 0x12,
	0x32, 0x0a, 0x14, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x72,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x14, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x72,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x65, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x72,
	0x65, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x72, 0x65, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x65, 0x61, 0x6c, 0x22,
	0xc6, 0x02, 0x0a, 0x0e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73,
	0x73, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x04, 0x72, 0x73, 0x73, 0x69, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x6e, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x03, 0x73, 0x6e, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x6c,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x61, 0x77, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x61, 0x77, 0x64, 0x61, 0x74, 0x61, 0x22, 0x76, 0x0a, 0x0e, 0x47, 0x65, 0x6f, 0x73,
	0x63, 0x61, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x73, 0x73, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x73,
	0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x73, 0x73, 0x69, 0x64,
	0x22, 0xce, 0x06, 0x0a, 0x15, 0x48, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x4c, 0x6f,
	0x77, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x52, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x1b,
	0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x57, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x57, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x42, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x68,
	0x64, 0x76, 0x5f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x68, 0x64, 0x76,
	0x52, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x68, 0x64, 0x69, 0x5f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x74, 0x68, 0x64, 0x69, 0x52, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x68, 0x69, 0x72,
	0x64, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x5f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x69, 0x63,
	0x52, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x66, 0x74, 0x68, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e,
	0x69, 0x63, 0x5f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x66, 0x69, 0x66, 0x74,
	0x68, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x52, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x68, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x5f, 0x72, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x68, 0x68, 0x61,
	0x72, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x52, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x68, 0x64, 0x76, 0x5f,
	0x77, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x68, 0x64, 0x76, 0x57, 0x12, 0x15,
	0x0a, 0x06, 0x74, 0x68, 0x64, 0x69, 0x5f, 0x77, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x74, 0x68, 0x64, 0x69, 0x57, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x68, 0x61,
	0x72, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x5f, 0x77, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x74, 0x68, 0x69, 0x72, 0x64, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x12, 0x27,
	0x0a, 0x0f, 0x66, 0x69, 0x66, 0x74, 0x68, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x5f,
	0x77, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x66, 0x69, 0x66, 0x74, 0x68, 0x68, 0x61,
	0x72, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x68, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x5f, 0x77, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x10, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x68, 0x68, 0x61, 0x72, 0x6d, 0x6f,
	0x6e, 0x69, 0x63, 0x57, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x68, 0x64, 0x76, 0x5f, 0x62, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x68, 0x64, 0x76, 0x42, 0x12, 0x15, 0x0a, 0x06, 0x74,
	0x68, 0x64, 0x69, 0x5f, 0x62, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x68, 0x64,
	0x69, 0x42, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x68, 0x61, 0x72, 0x6d, 0x6f,
	0x6e, 0x69, 0x63, 0x5f, 0x62, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x68, 0x69,
	0x72, 0x64, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x42, 0x12, 0x27, 0x0a, 0x0f, 0x66,
	0x69, 0x66, 0x74, 0x68, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x5f, 0x62, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x66, 0x69, 0x66, 0x74, 0x68, 0x68, 0x61, 0x72, 0x6d, 0x6f,
	0x6e, 0x69, 0x63, 0x42, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x68, 0x68,
	0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x5f, 0x62, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x68, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x69, 0x63,
	0x42, 0x22, 0xf2, 0x06, 0x0a, 0x15, 0x48, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x55,
	0x70, 0x70, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x52, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x12,
	0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x57, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x57, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x42, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x72, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x74,
	0x68, 0x64, 0x76, 0x5f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x68, 0x64,
	0x76, 0x52, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x68, 0x64, 0x69, 0x5f, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x74, 0x68, 0x64, 0x69, 0x52, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x69, 0x6e,
	0x74, 0x68, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x5f, 0x72, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x6e, 0x69, 0x6e, 0x74, 0x68, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x69,
	0x63, 0x52, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x6c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x68, 0x68, 0x61,
	0x72, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x5f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11,
	0x65, 0x6c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x68, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x69, 0x63,
	0x52, 0x12, 0x31, 0x0a, 0x14, 0x74, 0x68, 0x69, 0x72, 0x74, 0x65, 0x65, 0x6e, 0x74, 0x68, 0x68,
	0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x5f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x13, 0x74, 0x68, 0x69, 0x72, 0x74, 0x65, 0x65, 0x6e, 0x74, 0x68, 0x68, 0x61, 0x72, 0x6d, 0x6f,
	0x6e, 0x69, 0x63, 0x52, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x68, 0x64, 0x76, 0x5f, 0x77, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x68, 0x64, 0x76, 0x57, 0x12, 0x15, 0x0a, 0x06, 0x74,
	0x68, 0x64, 0x69, 0x5f, 0x77, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x68, 0x64,
	0x69, 0x57, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x69, 0x6e, 0x74, 0x68, 0x68, 0x61, 0x72, 0x6d, 0x6f,
	0x6e, 0x69, 0x63, 0x5f, 0x77, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6e, 0x69, 0x6e,
	0x74, 0x68, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x12, 0x2d, 0x0a, 0x12, 0x65,
	0x6c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x68, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x5f,
	0x77, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x65, 0x6c, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x68, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x12, 0x31, 0x0a, 0x14, 0x74, 0x68,
	0x69, 0x72, 0x74, 0x65, 0x65, 0x6e, 0x74, 0x68, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x69, 0x63,
	0x5f, 0x77, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x74, 0x68, 0x69, 0x72, 0x74, 0x65,
	0x65, 0x6e, 0x74, 0x68, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x57, 0x12, 0x15, 0x0a,
	0x06, 0x74, 0x68, 0x64, 0x76, 0x5f, 0x62, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74,
	0x68, 0x64, 0x76, 0x42, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x68, 0x64, 0x69, 0x5f, 0x62, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x68, 0x64, 0x69, 0x42, 0x12, 0x27, 0x0a, 0x0f, 0x6e,
	0x69, 0x6e, 0x74, 0x68, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x5f, 0x62, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6e, 0x69, 0x6e, 0x74, 0x68, 0x68, 0x61, 0x72, 0x6d, 0x6f,
	0x6e, 0x69, 0x63, 0x42, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x6c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x68,
	0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x5f, 0x62, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x11, 0x65, 0x6c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x68, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e,
	0x69, 0x63, 0x42, 0x12, 0x31, 0x0a, 0x14, 0x74, 0x68, 0x69, 0x72, 0x74, 0x65, 0x65, 0x6e, 0x74,
	0x68, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x5f, 0x62, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x13, 0x74, 0x68, 0x69, 0x72, 0x74, 0x65, 0x65, 0x6e, 0x74, 0x68, 0x68, 0x61, 0x72,
	0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x42, 0x22, 0x85, 0x03, 0x0a, 0x0e, 0x48, 0x56, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x52, 0x12, 0x1b, 0x0a, 0x09,
	0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x57, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x61, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x41, 0x62, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x62, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x76, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x42, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x43, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x61, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x12, 0x17, 0x0a, 0x07,
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x62, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61,
	0x6e, 0x67, 0x6c, 0x65, 0x42, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x63,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x22, 0xdd,
	0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x22, 0xcf,
	0x04, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x50, 0x32, 0x50, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x52, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x57, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x57, 0x12,
	0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x42, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x72,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x68, 0x64, 0x76, 0x5f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x74, 0x68, 0x64, 0x76, 0x52, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x68, 0x64, 0x69,
	0x5f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x68, 0x64, 0x69, 0x52, 0x12,
	0x15, 0x0a, 0x06, 0x74, 0x68, 0x64, 0x76, 0x5f, 0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x74, 0x68, 0x64, 0x76, 0x57, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x68, 0x64, 0x69, 0x5f, 0x77,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x68, 0x64, 0x69, 0x57, 0x12, 0x15, 0x0a,
	0x06, 0x74, 0x68, 0x64, 0x76, 0x5f, 0x62, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74,
	0x68, 0x64, 0x76, 0x42, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x68, 0x64, 0x69, 0x5f, 0x62, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x68, 0x64, 0x69, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x62, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x41, 0x62, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x42, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x43, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c,
	0x22, 0xcf, 0x09, 0x0a, 0x09, 0x50, 0x51, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x6d, 0x61, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x6d,
	0x61, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x78,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6d,
	0x61, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x78, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x6d, 0x61, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x68, 0x64, 0x76, 0x6d, 0x61,
	0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x74, 0x68, 0x64, 0x76, 0x6d, 0x61, 0x78,
	0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x73, 0x6d, 0x61, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x73, 0x6d, 0x61,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x6d, 0x61, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x6d, 0x61,
	0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73,
	0x6d, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x6d, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x6d, 0x61, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x73, 0x6d, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x68, 0x64, 0x76, 0x73, 0x6d, 0x61, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x74, 0x68, 0x64, 0x76, 0x73, 0x6d, 0x61, 0x12, 0x1e,
	0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6d, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6d, 0x69, 0x6e, 0x12, 0x26,
	0x0a, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x69, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x6d, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x69, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d,
	0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x68, 0x64, 0x76, 0x6d, 0x69, 0x6e, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x74, 0x68, 0x64, 0x76, 0x6d, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x73, 0x61, 0x67, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x73, 0x61, 0x67,
	0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x73, 0x77, 0x65,
	0x6c, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x72, 0x79, 0x73, 0x77, 0x65, 0x6c, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x72, 0x79, 0x73, 0x61, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x73, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0e,
	0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x73, 0x77, 0x65, 0x6c, 0x6c, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x73,
	0x77, 0x65, 0x6c, 0x6c, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x15, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x75,
	0x73, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x34,
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x70,
	0x72, 0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x76, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x65,
	0x64, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x64, 0x6f, 0x76, 0x65,
	0x72, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x68, 0x64, 0x69,
	0x73, 0x6d, 0x61, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x74, 0x68, 0x64, 0x69, 0x73,
	0x6d, 0x61, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x73, 0x6d, 0x61, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6e,
	0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x6d, 0x61,
	0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x6d, 0x61, 0x78, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6e, 0x65, 0x75,
	0x74, 0x72, 0x61, 0x6c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x78, 0x12, 0x2a,
	0x0a, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73,
	0x6d, 0x61, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61,
	0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x6d, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x78, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x70, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x6d, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61,
	0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x6d, 0x69, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x6d,
	0x69, 0x6e, 0x22, 0xdb, 0x01, 0x0a, 0x0f, 0x50, 0x51, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x65, 0x75, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x76, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x71, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x71, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x71, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x70, 0x71, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xf4, 0x03, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x65,
	0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x65, 0x75, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x6f, 0x6f,
	0x70, 0x69, 0x6d, 0x70, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x6c, 0x6f, 0x6f, 0x70, 0x69, 0x6d, 0x70, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x73, 0x73, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x04, 0x72,
	0x73, 0x73, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6e, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x03, 0x73, 0x6e, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x63, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x63, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x61, 0x69, 0x66, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x61, 0x69, 0x66, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x66, 0x72,
	0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x66, 0x72, 0x65,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x6d, 0x70, 0x63, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x74, 0x65, 0x6d, 0x70, 0x63, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x63, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x63, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x64, 0x63, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x64,
	0x63, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x69, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6d, 0x64, 0x69, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x64, 0x69, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x64, 0x69,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x36, 0x0a, 0x16, 0x76, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x75, 0x6e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x76, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x75, 0x6e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6f, 0x66, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6f,
	0x66, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x22, 0xd3, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x70, 0x61, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x70, 0x61, 0x72,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xf2, 0x07,
	0x0a, 0x0c, 0x53, 0x31, 0x31, 0x50, 0x51, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x6d, 0x61, 0x78, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6d, 0x61, 0x78, 0x12, 0x26, 0x0a, 0x0e,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x78, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x6d, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x78,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x68, 0x64, 0x76, 0x6d, 0x61, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x74, 0x68, 0x64, 0x76, 0x6d, 0x61, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x73, 0x6d, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x73, 0x6d, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x6d, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x6d, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x6d, 0x61, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73,
	0x6d, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x73, 0x6d, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x6d, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x68, 0x64, 0x76, 0x73, 0x6d, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x74, 0x68, 0x64, 0x76, 0x73, 0x6d, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x6d, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x6d, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x69, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x69, 0x6e,
	0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x6d, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x68, 0x64, 0x76, 0x6d, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x74,
	0x68, 0x64, 0x76, 0x6d, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x72, 0x79, 0x73, 0x61, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x6f,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x73, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x6f,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x73, 0x77, 0x65, 0x6c, 0x6c, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x73, 0x77, 0x65,
	0x6c, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x73,
	0x61, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x72, 0x79, 0x73, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x72, 0x79, 0x73, 0x77, 0x65, 0x6c, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x73, 0x77, 0x65, 0x6c, 0x6c, 0x12, 0x34,
	0x0a, 0x15, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x73,
	0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x76, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x14, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x6f, 0x76, 0x65,
	0x72, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x6c,
	0x6f, 0x6e, 0x67, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x6c, 0x6f, 0x6e, 0x67,
	0x65, 0x64, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x32,
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x70, 0x72,
	0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x22, 0x52, 0x0a, 0x16, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x22, 0x93, 0x02, 0x0a, 0x0d, 0x55, 0x70, 0x6c, 0x69, 0x6e,
	0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x65, 0x75, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x73, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x04, 0x72, 0x73, 0x73, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6e, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x03, 0x73, 0x6e, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x63, 0x74, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x63, 0x74, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x61,
	0x77, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x22, 0xeb, 0x05, 0x0a,
	0x13, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x65, 0x75,
	0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x65,
	0x75, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x61, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x68, 0x30, 0x5f, 0x32, 0x31, 0x33, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x68, 0x30, 0x32, 0x31, 0x33, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x32, 0x31,
	0x33, 0x5f, 0x32, 0x31, 0x35, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x68, 0x32, 0x31,
	0x33, 0x32, 0x31, 0x35, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x32, 0x31, 0x35, 0x5f, 0x32, 0x31, 0x37,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x68, 0x32, 0x31, 0x35, 0x32, 0x31, 0x37, 0x12,
	0x19, 0x0a, 0x08, 0x68, 0x32, 0x31, 0x37, 0x5f, 0x32, 0x31, 0x39, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x68, 0x32, 0x31, 0x37, 0x32, 0x31, 0x39, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x32,
	0x31, 0x39, 0x5f, 0x32, 0x32, 0x31, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x68, 0x32,
	0x31, 0x39, 0x32, 0x32, 0x31, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x32, 0x32, 0x31, 0x5f, 0x32, 0x32,
	0x33, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x68, 0x32, 0x32, 0x31, 0x32, 0x32, 0x33,
	0x12, 0x19, 0x0a, 0x08, 0x68, 0x32, 0x32, 0x33, 0x5f, 0x32, 0x32, 0x35, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x68, 0x32, 0x32, 0x33, 0x32, 0x32, 0x35, 0x12, 0x19, 0x0a, 0x08, 0x68,
	0x32, 0x32, 0x35, 0x5f, 0x32, 0x32, 0x37, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x68,
	0x32, 0x32, 0x35, 0x32, 0x32, 0x37, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x32, 0x32, 0x37, 0x5f, 0x32,
	0x32, 0x39, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x68, 0x32, 0x32, 0x37, 0x32, 0x32,
	0x39, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x32, 0x32, 0x39, 0x5f, 0x32, 0x33, 0x31, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x68, 0x32, 0x32, 0x39, 0x32, 0x33, 0x31, 0x12, 0x19, 0x0a, 0x08,
	0x68, 0x32, 0x33, 0x31, 0x5f, 0x32, 0x33, 0x33, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x68, 0x32, 0x33, 0x31, 0x32, 0x33, 0x33, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x32, 0x33, 0x33, 0x5f,
	0x32, 0x33, 0x35, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x68, 0x32, 0x33, 0x33, 0x32,
	0x33, 0x35, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x32, 0x33, 0x35, 0x5f, 0x32, 0x33, 0x37, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x68, 0x32, 0x33, 0x35, 0x32, 0x33, 0x37, 0x12, 0x19, 0x0a,
	0x08, 0x68, 0x32, 0x33, 0x37, 0x5f, 0x32, 0x33, 0x39, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x68, 0x32, 0x33, 0x37, 0x32, 0x33, 0x39, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x32, 0x33, 0x39,
	0x5f, 0x32, 0x34, 0x31, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x68, 0x32, 0x33, 0x39,
	0x32, 0x34, 0x31, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x32, 0x34, 0x31, 0x5f, 0x32, 0x34, 0x33, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x68, 0x32, 0x34, 0x31, 0x32, 0x34, 0x33, 0x12, 0x19,
	0x0a, 0x08, 0x68, 0x32, 0x34, 0x33, 0x5f, 0x32, 0x34, 0x35, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x68, 0x32, 0x34, 0x33, 0x32, 0x34, 0x35, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x32, 0x34,
	0x35, 0x5f, 0x32, 0x34, 0x37, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x68, 0x32, 0x34,
	0x35, 0x32, 0x34, 0x37, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x32, 0x34, 0x37, 0x5f, 0x32, 0x34, 0x39,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x68, 0x32, 0x34, 0x37, 0x32, 0x34, 0x39, 0x12,
	0x19, 0x0a, 0x08, 0x68, 0x32, 0x34, 0x39, 0x5f, 0x33, 0x30, 0x30, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x68, 0x32, 0x34, 0x39, 0x33, 0x30, 0x30, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x6b, 0x68, 0x61, 0x6a, 0x61,
	0x74, 0x61, 0x2f, 0x70, 0x70, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x70, 0x75,
	0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ppuplink_proto_rawDescOnce sync.Once
	file_ppuplink_proto_rawDescData = file_ppuplink_proto_rawDesc
)

func file_ppuplink_proto_rawDescGZIP() []byte {
	file_ppuplink_proto_rawDescOnce.Do(func() {
		file_ppuplink_proto_rawDescData = protoimpl.X.CompressGZIP(file_ppuplink_proto_rawDescData)
	})
	return file_ppuplink_proto_rawDescData
}

var file_ppuplink_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_ppuplink_proto_goTypes = []interface{}{
	(*AlarmMessage)(nil),           // 0: ppuplink.AlarmMessage
	(*CircuitEnergyMessage)(nil),   // 1: ppuplink.CircuitEnergyMessage
	(*CircuitLoadMessage)(nil),     // 2: ppuplink.CircuitLoadMessage
	(*ConfigUplinkMessage)(nil),    // 3: ppuplink.ConfigUplinkMessage
	(*EnergyMessage)(nil),          // 4: ppuplink.EnergyMessage
	(*GatewayMessage)(nil),         // 5: ppuplink.GatewayMessage
	(*GeoscanMessage)(nil),         // 6: ppuplink.GeoscanMessage
	(*HarmonicsLowerMessage)(nil),  // 7: ppuplink.HarmonicsLowerMessage
	(*HarmonicsUpperMessage)(nil),  // 8: ppuplink.HarmonicsUpperMessage
	(*HVAlarmMessage)(nil),         // 9: ppuplink.HVAlarmMessage
	(*InstMessage)(nil),            // 10: ppuplink.InstMessage
	(*InstP2PMessage)(nil),         // 11: ppuplink.InstP2PMessage
	(*PQMessage)(nil),              // 12: ppuplink.PQMessage
	(*PQEventsMessage)(nil),        // 13: ppuplink.PQEventsMessage
	(*ProcessedMessage)(nil),       // 14: ppuplink.ProcessedMessage
	(*ResendResponseMessage)(nil),  // 15: ppuplink.ResendResponseMessage
	(*S11PQMessage)(nil),           // 16: ppuplink.S11PQMessage
	(*TimeSyncRequestMessage)(nil), // 17: ppuplink.TimeSyncRequestMessage
	(*UplinkMessage)(nil),          // 18: ppuplink.UplinkMessage
	(*VoltageStatsMessage)(nil),    // 19: ppuplink.VoltageStatsMessage
}
var file_ppuplink_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ppuplink_proto_init() }
func file_ppuplink_proto_init() {
	if File_ppuplink_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ppuplink_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlarmMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ppuplink_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitEnergyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ppuplink_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitLoadMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ppuplink_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigUplinkMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ppuplink_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnergyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ppuplink_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ppuplink_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoscanMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ppuplink_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HarmonicsLowerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ppuplink_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HarmonicsUpperMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ppuplink_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HVAlarmMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ppuplink_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ppuplink_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstP2PMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ppuplink_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PQMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ppuplink_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PQEventsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ppuplink_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ppuplink_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResendResponseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ppuplink_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S11PQMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ppuplink_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeSyncRequestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ppuplink_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UplinkMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ppuplink_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoltageStatsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ppuplink_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ppuplink_proto_goTypes,
		DependencyIndexes: file_ppuplink_proto_depIdxs,
		MessageInfos:      file_ppuplink_proto_msgTypes,
	}.Build()
	File_ppuplink_proto = out.File
	file_ppuplink_proto_rawDesc = nil
	file_ppuplink_proto_goTypes = nil
	file_ppuplink_proto_depIdxs = nil
}
